#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import BgpConfigurator
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 startBgpServer(i32 asNumber, string routerId, i32 port, i32 holdTime, i32 keepAliveTime)'
  print '  i32 stopBgpServer()'
  print '  i32 createPeer(string neighborIpAddress, i32 asNumber)'
  print '  i32 deletePeer(string neighborIpAddress)'
  print '  i32 addRouteMapToMPBGPPeer(string neighborIpAddress, i32 routeMapNumber)'
  print '  i32 deleteRouteMapToMPBGPPeer(string neighborIpAddress, i32 routeMapNumber)'
  print '  i32 addVrf(string rd,  irts,  erts)'
  print '  i32 delVrf(string rd)'
  print '  i32 pushRoute(i32 aclNum, i32 routeMapNum, i32 seqNum, string prefix, string wildcard, string neighborIpAddress, i32 vpnNum)'
  print '  i32 withdrawRoute(i32 aclNum, i32 routeMapNum, i32 seqNum, string prefix, string neighborIpAddress)'
  print '  Routes getRoutes(i32 optype, i32 winSize)'
  print '  string getRouteTarget(string prefix)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = BgpConfigurator.Client(protocol)
transport.open()

if cmd == 'startBgpServer':
  if len(args) != 5:
    print 'startBgpServer requires 5 args'
    sys.exit(1)
  pp.pprint(client.startBgpServer(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'stopBgpServer':
  if len(args) != 0:
    print 'stopBgpServer requires 0 args'
    sys.exit(1)
  pp.pprint(client.stopBgpServer())

elif cmd == 'createPeer':
  if len(args) != 2:
    print 'createPeer requires 2 args'
    sys.exit(1)
  pp.pprint(client.createPeer(args[0],eval(args[1]),))

elif cmd == 'deletePeer':
  if len(args) != 1:
    print 'deletePeer requires 1 args'
    sys.exit(1)
  pp.pprint(client.deletePeer(args[0],))

elif cmd == 'addRouteMapToMPBGPPeer':
  if len(args) != 2:
    print 'addRouteMapToMPBGPPeer requires 2 args'
    sys.exit(1)
  pp.pprint(client.addRouteMapToMPBGPPeer(args[0],eval(args[1]),))

elif cmd == 'deleteRouteMapToMPBGPPeer':
  if len(args) != 2:
    print 'deleteRouteMapToMPBGPPeer requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteRouteMapToMPBGPPeer(args[0],eval(args[1]),))

elif cmd == 'addVrf':
  if len(args) != 3:
    print 'addVrf requires 3 args'
    sys.exit(1)
  pp.pprint(client.addVrf(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'delVrf':
  if len(args) != 1:
    print 'delVrf requires 1 args'
    sys.exit(1)
  pp.pprint(client.delVrf(args[0],))

elif cmd == 'pushRoute':
  if len(args) != 7:
    print 'pushRoute requires 7 args'
    sys.exit(1)
  pp.pprint(client.pushRoute(eval(args[0]),eval(args[1]),eval(args[2]),args[3],args[4],args[5],eval(args[6]),))

elif cmd == 'withdrawRoute':
  if len(args) != 5:
    print 'withdrawRoute requires 5 args'
    sys.exit(1)
  pp.pprint(client.withdrawRoute(eval(args[0]),eval(args[1]),eval(args[2]),args[3],args[4],))

elif cmd == 'getRoutes':
  if len(args) != 2:
    print 'getRoutes requires 2 args'
    sys.exit(1)
  pp.pprint(client.getRoutes(eval(args[0]),eval(args[1]),))

elif cmd == 'getRouteTarget':
  if len(args) != 1:
    print 'getRouteTarget requires 1 args'
    sys.exit(1)
  pp.pprint(client.getRouteTarget(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
