/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BgpConfigurator {

  public interface Iface {

    public int startBgpServer(int asNumber, String routerId, int port, int holdTime, int keepAliveTime) throws org.apache.thrift.TException;

    public int stopBgpServer() throws org.apache.thrift.TException;

    public int createPeer(String neighborIpAddress, int asNumber) throws org.apache.thrift.TException;

    public int deletePeer(String neighborIpAddress) throws org.apache.thrift.TException;

    public int addRouteMapToMPBGPPeer(String neighborIpAddress) throws org.apache.thrift.TException;

    public int deleteRouteMapToMPBGPPeer(String neighborIpAddress) throws org.apache.thrift.TException;

    public int addVrf(String rd, List<String> irts, List<String> erts) throws org.apache.thrift.TException;

    public int delVrf(String rd) throws org.apache.thrift.TException;

    public int pushRoute(String prefix, int vpnNum, String neighborIpAddress) throws org.apache.thrift.TException;

    public int withdrawRoute(String prefix, int vpnNum, String neighborIpAddress) throws org.apache.thrift.TException;

    public Routes getRoutes(int optype, int winSize) throws org.apache.thrift.TException;

    public String getRouteTarget(String prefix) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void startBgpServer(int asNumber, String routerId, int port, int holdTime, int keepAliveTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startBgpServer_call> resultHandler) throws org.apache.thrift.TException;

    public void stopBgpServer(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopBgpServer_call> resultHandler) throws org.apache.thrift.TException;

    public void createPeer(String neighborIpAddress, int asNumber, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createPeer_call> resultHandler) throws org.apache.thrift.TException;

    public void deletePeer(String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deletePeer_call> resultHandler) throws org.apache.thrift.TException;

    public void addRouteMapToMPBGPPeer(String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addRouteMapToMPBGPPeer_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteRouteMapToMPBGPPeer(String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteRouteMapToMPBGPPeer_call> resultHandler) throws org.apache.thrift.TException;

    public void addVrf(String rd, List<String> irts, List<String> erts, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addVrf_call> resultHandler) throws org.apache.thrift.TException;

    public void delVrf(String rd, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delVrf_call> resultHandler) throws org.apache.thrift.TException;

    public void pushRoute(String prefix, int vpnNum, String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pushRoute_call> resultHandler) throws org.apache.thrift.TException;

    public void withdrawRoute(String prefix, int vpnNum, String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.withdrawRoute_call> resultHandler) throws org.apache.thrift.TException;

    public void getRoutes(int optype, int winSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRoutes_call> resultHandler) throws org.apache.thrift.TException;

    public void getRouteTarget(String prefix, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRouteTarget_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int startBgpServer(int asNumber, String routerId, int port, int holdTime, int keepAliveTime) throws org.apache.thrift.TException
    {
      send_startBgpServer(asNumber, routerId, port, holdTime, keepAliveTime);
      return recv_startBgpServer();
    }

    public void send_startBgpServer(int asNumber, String routerId, int port, int holdTime, int keepAliveTime) throws org.apache.thrift.TException
    {
      startBgpServer_args args = new startBgpServer_args();
      args.setAsNumber(asNumber);
      args.setRouterId(routerId);
      args.setPort(port);
      args.setHoldTime(holdTime);
      args.setKeepAliveTime(keepAliveTime);
      sendBase("startBgpServer", args);
    }

    public int recv_startBgpServer() throws org.apache.thrift.TException
    {
      startBgpServer_result result = new startBgpServer_result();
      receiveBase(result, "startBgpServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startBgpServer failed: unknown result");
    }

    public int stopBgpServer() throws org.apache.thrift.TException
    {
      send_stopBgpServer();
      return recv_stopBgpServer();
    }

    public void send_stopBgpServer() throws org.apache.thrift.TException
    {
      stopBgpServer_args args = new stopBgpServer_args();
      sendBase("stopBgpServer", args);
    }

    public int recv_stopBgpServer() throws org.apache.thrift.TException
    {
      stopBgpServer_result result = new stopBgpServer_result();
      receiveBase(result, "stopBgpServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopBgpServer failed: unknown result");
    }

    public int createPeer(String neighborIpAddress, int asNumber) throws org.apache.thrift.TException
    {
      send_createPeer(neighborIpAddress, asNumber);
      return recv_createPeer();
    }

    public void send_createPeer(String neighborIpAddress, int asNumber) throws org.apache.thrift.TException
    {
      createPeer_args args = new createPeer_args();
      args.setNeighborIpAddress(neighborIpAddress);
      args.setAsNumber(asNumber);
      sendBase("createPeer", args);
    }

    public int recv_createPeer() throws org.apache.thrift.TException
    {
      createPeer_result result = new createPeer_result();
      receiveBase(result, "createPeer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createPeer failed: unknown result");
    }

    public int deletePeer(String neighborIpAddress) throws org.apache.thrift.TException
    {
      send_deletePeer(neighborIpAddress);
      return recv_deletePeer();
    }

    public void send_deletePeer(String neighborIpAddress) throws org.apache.thrift.TException
    {
      deletePeer_args args = new deletePeer_args();
      args.setNeighborIpAddress(neighborIpAddress);
      sendBase("deletePeer", args);
    }

    public int recv_deletePeer() throws org.apache.thrift.TException
    {
      deletePeer_result result = new deletePeer_result();
      receiveBase(result, "deletePeer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deletePeer failed: unknown result");
    }

    public int addRouteMapToMPBGPPeer(String neighborIpAddress) throws org.apache.thrift.TException
    {
      send_addRouteMapToMPBGPPeer(neighborIpAddress);
      return recv_addRouteMapToMPBGPPeer();
    }

    public void send_addRouteMapToMPBGPPeer(String neighborIpAddress) throws org.apache.thrift.TException
    {
      addRouteMapToMPBGPPeer_args args = new addRouteMapToMPBGPPeer_args();
      args.setNeighborIpAddress(neighborIpAddress);
      sendBase("addRouteMapToMPBGPPeer", args);
    }

    public int recv_addRouteMapToMPBGPPeer() throws org.apache.thrift.TException
    {
      addRouteMapToMPBGPPeer_result result = new addRouteMapToMPBGPPeer_result();
      receiveBase(result, "addRouteMapToMPBGPPeer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRouteMapToMPBGPPeer failed: unknown result");
    }

    public int deleteRouteMapToMPBGPPeer(String neighborIpAddress) throws org.apache.thrift.TException
    {
      send_deleteRouteMapToMPBGPPeer(neighborIpAddress);
      return recv_deleteRouteMapToMPBGPPeer();
    }

    public void send_deleteRouteMapToMPBGPPeer(String neighborIpAddress) throws org.apache.thrift.TException
    {
      deleteRouteMapToMPBGPPeer_args args = new deleteRouteMapToMPBGPPeer_args();
      args.setNeighborIpAddress(neighborIpAddress);
      sendBase("deleteRouteMapToMPBGPPeer", args);
    }

    public int recv_deleteRouteMapToMPBGPPeer() throws org.apache.thrift.TException
    {
      deleteRouteMapToMPBGPPeer_result result = new deleteRouteMapToMPBGPPeer_result();
      receiveBase(result, "deleteRouteMapToMPBGPPeer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteRouteMapToMPBGPPeer failed: unknown result");
    }

    public int addVrf(String rd, List<String> irts, List<String> erts) throws org.apache.thrift.TException
    {
      send_addVrf(rd, irts, erts);
      return recv_addVrf();
    }

    public void send_addVrf(String rd, List<String> irts, List<String> erts) throws org.apache.thrift.TException
    {
      addVrf_args args = new addVrf_args();
      args.setRd(rd);
      args.setIrts(irts);
      args.setErts(erts);
      sendBase("addVrf", args);
    }

    public int recv_addVrf() throws org.apache.thrift.TException
    {
      addVrf_result result = new addVrf_result();
      receiveBase(result, "addVrf");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addVrf failed: unknown result");
    }

    public int delVrf(String rd) throws org.apache.thrift.TException
    {
      send_delVrf(rd);
      return recv_delVrf();
    }

    public void send_delVrf(String rd) throws org.apache.thrift.TException
    {
      delVrf_args args = new delVrf_args();
      args.setRd(rd);
      sendBase("delVrf", args);
    }

    public int recv_delVrf() throws org.apache.thrift.TException
    {
      delVrf_result result = new delVrf_result();
      receiveBase(result, "delVrf");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delVrf failed: unknown result");
    }

    public int pushRoute(String prefix, int vpnNum, String neighborIpAddress) throws org.apache.thrift.TException
    {
      send_pushRoute(prefix, vpnNum, neighborIpAddress);
      return recv_pushRoute();
    }

    public void send_pushRoute(String prefix, int vpnNum, String neighborIpAddress) throws org.apache.thrift.TException
    {
      pushRoute_args args = new pushRoute_args();
      args.setPrefix(prefix);
      args.setVpnNum(vpnNum);
      args.setNeighborIpAddress(neighborIpAddress);
      sendBase("pushRoute", args);
    }

    public int recv_pushRoute() throws org.apache.thrift.TException
    {
      pushRoute_result result = new pushRoute_result();
      receiveBase(result, "pushRoute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pushRoute failed: unknown result");
    }

    public int withdrawRoute(String prefix, int vpnNum, String neighborIpAddress) throws org.apache.thrift.TException
    {
      send_withdrawRoute(prefix, vpnNum, neighborIpAddress);
      return recv_withdrawRoute();
    }

    public void send_withdrawRoute(String prefix, int vpnNum, String neighborIpAddress) throws org.apache.thrift.TException
    {
      withdrawRoute_args args = new withdrawRoute_args();
      args.setPrefix(prefix);
      args.setVpnNum(vpnNum);
      args.setNeighborIpAddress(neighborIpAddress);
      sendBase("withdrawRoute", args);
    }

    public int recv_withdrawRoute() throws org.apache.thrift.TException
    {
      withdrawRoute_result result = new withdrawRoute_result();
      receiveBase(result, "withdrawRoute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "withdrawRoute failed: unknown result");
    }

    public Routes getRoutes(int optype, int winSize) throws org.apache.thrift.TException
    {
      send_getRoutes(optype, winSize);
      return recv_getRoutes();
    }

    public void send_getRoutes(int optype, int winSize) throws org.apache.thrift.TException
    {
      getRoutes_args args = new getRoutes_args();
      args.setOptype(optype);
      args.setWinSize(winSize);
      sendBase("getRoutes", args);
    }

    public Routes recv_getRoutes() throws org.apache.thrift.TException
    {
      getRoutes_result result = new getRoutes_result();
      receiveBase(result, "getRoutes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoutes failed: unknown result");
    }

    public String getRouteTarget(String prefix) throws org.apache.thrift.TException
    {
      send_getRouteTarget(prefix);
      return recv_getRouteTarget();
    }

    public void send_getRouteTarget(String prefix) throws org.apache.thrift.TException
    {
      getRouteTarget_args args = new getRouteTarget_args();
      args.setPrefix(prefix);
      sendBase("getRouteTarget", args);
    }

    public String recv_getRouteTarget() throws org.apache.thrift.TException
    {
      getRouteTarget_result result = new getRouteTarget_result();
      receiveBase(result, "getRouteTarget");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRouteTarget failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void startBgpServer(int asNumber, String routerId, int port, int holdTime, int keepAliveTime, org.apache.thrift.async.AsyncMethodCallback<startBgpServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startBgpServer_call method_call = new startBgpServer_call(asNumber, routerId, port, holdTime, keepAliveTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startBgpServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int asNumber;
      private String routerId;
      private int port;
      private int holdTime;
      private int keepAliveTime;
      public startBgpServer_call(int asNumber, String routerId, int port, int holdTime, int keepAliveTime, org.apache.thrift.async.AsyncMethodCallback<startBgpServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.asNumber = asNumber;
        this.routerId = routerId;
        this.port = port;
        this.holdTime = holdTime;
        this.keepAliveTime = keepAliveTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startBgpServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startBgpServer_args args = new startBgpServer_args();
        args.setAsNumber(asNumber);
        args.setRouterId(routerId);
        args.setPort(port);
        args.setHoldTime(holdTime);
        args.setKeepAliveTime(keepAliveTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startBgpServer();
      }
    }

    public void stopBgpServer(org.apache.thrift.async.AsyncMethodCallback<stopBgpServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopBgpServer_call method_call = new stopBgpServer_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopBgpServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      public stopBgpServer_call(org.apache.thrift.async.AsyncMethodCallback<stopBgpServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopBgpServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopBgpServer_args args = new stopBgpServer_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopBgpServer();
      }
    }

    public void createPeer(String neighborIpAddress, int asNumber, org.apache.thrift.async.AsyncMethodCallback<createPeer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createPeer_call method_call = new createPeer_call(neighborIpAddress, asNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createPeer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String neighborIpAddress;
      private int asNumber;
      public createPeer_call(String neighborIpAddress, int asNumber, org.apache.thrift.async.AsyncMethodCallback<createPeer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.neighborIpAddress = neighborIpAddress;
        this.asNumber = asNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createPeer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createPeer_args args = new createPeer_args();
        args.setNeighborIpAddress(neighborIpAddress);
        args.setAsNumber(asNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createPeer();
      }
    }

    public void deletePeer(String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<deletePeer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletePeer_call method_call = new deletePeer_call(neighborIpAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletePeer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String neighborIpAddress;
      public deletePeer_call(String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<deletePeer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.neighborIpAddress = neighborIpAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletePeer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletePeer_args args = new deletePeer_args();
        args.setNeighborIpAddress(neighborIpAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deletePeer();
      }
    }

    public void addRouteMapToMPBGPPeer(String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<addRouteMapToMPBGPPeer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRouteMapToMPBGPPeer_call method_call = new addRouteMapToMPBGPPeer_call(neighborIpAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRouteMapToMPBGPPeer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String neighborIpAddress;
      public addRouteMapToMPBGPPeer_call(String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<addRouteMapToMPBGPPeer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.neighborIpAddress = neighborIpAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRouteMapToMPBGPPeer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRouteMapToMPBGPPeer_args args = new addRouteMapToMPBGPPeer_args();
        args.setNeighborIpAddress(neighborIpAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRouteMapToMPBGPPeer();
      }
    }

    public void deleteRouteMapToMPBGPPeer(String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<deleteRouteMapToMPBGPPeer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRouteMapToMPBGPPeer_call method_call = new deleteRouteMapToMPBGPPeer_call(neighborIpAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteRouteMapToMPBGPPeer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String neighborIpAddress;
      public deleteRouteMapToMPBGPPeer_call(String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<deleteRouteMapToMPBGPPeer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.neighborIpAddress = neighborIpAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRouteMapToMPBGPPeer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRouteMapToMPBGPPeer_args args = new deleteRouteMapToMPBGPPeer_args();
        args.setNeighborIpAddress(neighborIpAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteRouteMapToMPBGPPeer();
      }
    }

    public void addVrf(String rd, List<String> irts, List<String> erts, org.apache.thrift.async.AsyncMethodCallback<addVrf_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addVrf_call method_call = new addVrf_call(rd, irts, erts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addVrf_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rd;
      private List<String> irts;
      private List<String> erts;
      public addVrf_call(String rd, List<String> irts, List<String> erts, org.apache.thrift.async.AsyncMethodCallback<addVrf_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rd = rd;
        this.irts = irts;
        this.erts = erts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addVrf", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addVrf_args args = new addVrf_args();
        args.setRd(rd);
        args.setIrts(irts);
        args.setErts(erts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addVrf();
      }
    }

    public void delVrf(String rd, org.apache.thrift.async.AsyncMethodCallback<delVrf_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delVrf_call method_call = new delVrf_call(rd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delVrf_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rd;
      public delVrf_call(String rd, org.apache.thrift.async.AsyncMethodCallback<delVrf_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rd = rd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delVrf", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delVrf_args args = new delVrf_args();
        args.setRd(rd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delVrf();
      }
    }

    public void pushRoute(String prefix, int vpnNum, String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<pushRoute_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushRoute_call method_call = new pushRoute_call(prefix, vpnNum, neighborIpAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushRoute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String prefix;
      private int vpnNum;
      private String neighborIpAddress;
      public pushRoute_call(String prefix, int vpnNum, String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<pushRoute_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prefix = prefix;
        this.vpnNum = vpnNum;
        this.neighborIpAddress = neighborIpAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushRoute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pushRoute_args args = new pushRoute_args();
        args.setPrefix(prefix);
        args.setVpnNum(vpnNum);
        args.setNeighborIpAddress(neighborIpAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pushRoute();
      }
    }

    public void withdrawRoute(String prefix, int vpnNum, String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<withdrawRoute_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      withdrawRoute_call method_call = new withdrawRoute_call(prefix, vpnNum, neighborIpAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class withdrawRoute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String prefix;
      private int vpnNum;
      private String neighborIpAddress;
      public withdrawRoute_call(String prefix, int vpnNum, String neighborIpAddress, org.apache.thrift.async.AsyncMethodCallback<withdrawRoute_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prefix = prefix;
        this.vpnNum = vpnNum;
        this.neighborIpAddress = neighborIpAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("withdrawRoute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        withdrawRoute_args args = new withdrawRoute_args();
        args.setPrefix(prefix);
        args.setVpnNum(vpnNum);
        args.setNeighborIpAddress(neighborIpAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_withdrawRoute();
      }
    }

    public void getRoutes(int optype, int winSize, org.apache.thrift.async.AsyncMethodCallback<getRoutes_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRoutes_call method_call = new getRoutes_call(optype, winSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoutes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int optype;
      private int winSize;
      public getRoutes_call(int optype, int winSize, org.apache.thrift.async.AsyncMethodCallback<getRoutes_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.optype = optype;
        this.winSize = winSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoutes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoutes_args args = new getRoutes_args();
        args.setOptype(optype);
        args.setWinSize(winSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Routes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoutes();
      }
    }

    public void getRouteTarget(String prefix, org.apache.thrift.async.AsyncMethodCallback<getRouteTarget_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRouteTarget_call method_call = new getRouteTarget_call(prefix, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRouteTarget_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String prefix;
      public getRouteTarget_call(String prefix, org.apache.thrift.async.AsyncMethodCallback<getRouteTarget_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prefix = prefix;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRouteTarget", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRouteTarget_args args = new getRouteTarget_args();
        args.setPrefix(prefix);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRouteTarget();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("startBgpServer", new startBgpServer());
      processMap.put("stopBgpServer", new stopBgpServer());
      processMap.put("createPeer", new createPeer());
      processMap.put("deletePeer", new deletePeer());
      processMap.put("addRouteMapToMPBGPPeer", new addRouteMapToMPBGPPeer());
      processMap.put("deleteRouteMapToMPBGPPeer", new deleteRouteMapToMPBGPPeer());
      processMap.put("addVrf", new addVrf());
      processMap.put("delVrf", new delVrf());
      processMap.put("pushRoute", new pushRoute());
      processMap.put("withdrawRoute", new withdrawRoute());
      processMap.put("getRoutes", new getRoutes());
      processMap.put("getRouteTarget", new getRouteTarget());
      return processMap;
    }

    public static class startBgpServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startBgpServer_args> {
      public startBgpServer() {
        super("startBgpServer");
      }

      public startBgpServer_args getEmptyArgsInstance() {
        return new startBgpServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startBgpServer_result getResult(I iface, startBgpServer_args args) throws org.apache.thrift.TException {
        startBgpServer_result result = new startBgpServer_result();
        result.success = iface.startBgpServer(args.asNumber, args.routerId, args.port, args.holdTime, args.keepAliveTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class stopBgpServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopBgpServer_args> {
      public stopBgpServer() {
        super("stopBgpServer");
      }

      public stopBgpServer_args getEmptyArgsInstance() {
        return new stopBgpServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stopBgpServer_result getResult(I iface, stopBgpServer_args args) throws org.apache.thrift.TException {
        stopBgpServer_result result = new stopBgpServer_result();
        result.success = iface.stopBgpServer();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createPeer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createPeer_args> {
      public createPeer() {
        super("createPeer");
      }

      public createPeer_args getEmptyArgsInstance() {
        return new createPeer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createPeer_result getResult(I iface, createPeer_args args) throws org.apache.thrift.TException {
        createPeer_result result = new createPeer_result();
        result.success = iface.createPeer(args.neighborIpAddress, args.asNumber);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deletePeer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletePeer_args> {
      public deletePeer() {
        super("deletePeer");
      }

      public deletePeer_args getEmptyArgsInstance() {
        return new deletePeer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deletePeer_result getResult(I iface, deletePeer_args args) throws org.apache.thrift.TException {
        deletePeer_result result = new deletePeer_result();
        result.success = iface.deletePeer(args.neighborIpAddress);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addRouteMapToMPBGPPeer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRouteMapToMPBGPPeer_args> {
      public addRouteMapToMPBGPPeer() {
        super("addRouteMapToMPBGPPeer");
      }

      public addRouteMapToMPBGPPeer_args getEmptyArgsInstance() {
        return new addRouteMapToMPBGPPeer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRouteMapToMPBGPPeer_result getResult(I iface, addRouteMapToMPBGPPeer_args args) throws org.apache.thrift.TException {
        addRouteMapToMPBGPPeer_result result = new addRouteMapToMPBGPPeer_result();
        result.success = iface.addRouteMapToMPBGPPeer(args.neighborIpAddress);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteRouteMapToMPBGPPeer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRouteMapToMPBGPPeer_args> {
      public deleteRouteMapToMPBGPPeer() {
        super("deleteRouteMapToMPBGPPeer");
      }

      public deleteRouteMapToMPBGPPeer_args getEmptyArgsInstance() {
        return new deleteRouteMapToMPBGPPeer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteRouteMapToMPBGPPeer_result getResult(I iface, deleteRouteMapToMPBGPPeer_args args) throws org.apache.thrift.TException {
        deleteRouteMapToMPBGPPeer_result result = new deleteRouteMapToMPBGPPeer_result();
        result.success = iface.deleteRouteMapToMPBGPPeer(args.neighborIpAddress);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addVrf<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addVrf_args> {
      public addVrf() {
        super("addVrf");
      }

      public addVrf_args getEmptyArgsInstance() {
        return new addVrf_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addVrf_result getResult(I iface, addVrf_args args) throws org.apache.thrift.TException {
        addVrf_result result = new addVrf_result();
        result.success = iface.addVrf(args.rd, args.irts, args.erts);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delVrf<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delVrf_args> {
      public delVrf() {
        super("delVrf");
      }

      public delVrf_args getEmptyArgsInstance() {
        return new delVrf_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delVrf_result getResult(I iface, delVrf_args args) throws org.apache.thrift.TException {
        delVrf_result result = new delVrf_result();
        result.success = iface.delVrf(args.rd);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class pushRoute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushRoute_args> {
      public pushRoute() {
        super("pushRoute");
      }

      public pushRoute_args getEmptyArgsInstance() {
        return new pushRoute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pushRoute_result getResult(I iface, pushRoute_args args) throws org.apache.thrift.TException {
        pushRoute_result result = new pushRoute_result();
        result.success = iface.pushRoute(args.prefix, args.vpnNum, args.neighborIpAddress);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class withdrawRoute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, withdrawRoute_args> {
      public withdrawRoute() {
        super("withdrawRoute");
      }

      public withdrawRoute_args getEmptyArgsInstance() {
        return new withdrawRoute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public withdrawRoute_result getResult(I iface, withdrawRoute_args args) throws org.apache.thrift.TException {
        withdrawRoute_result result = new withdrawRoute_result();
        result.success = iface.withdrawRoute(args.prefix, args.vpnNum, args.neighborIpAddress);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRoutes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoutes_args> {
      public getRoutes() {
        super("getRoutes");
      }

      public getRoutes_args getEmptyArgsInstance() {
        return new getRoutes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRoutes_result getResult(I iface, getRoutes_args args) throws org.apache.thrift.TException {
        getRoutes_result result = new getRoutes_result();
        result.success = iface.getRoutes(args.optype, args.winSize);
        return result;
      }
    }

    public static class getRouteTarget<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRouteTarget_args> {
      public getRouteTarget() {
        super("getRouteTarget");
      }

      public getRouteTarget_args getEmptyArgsInstance() {
        return new getRouteTarget_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRouteTarget_result getResult(I iface, getRouteTarget_args args) throws org.apache.thrift.TException {
        getRouteTarget_result result = new getRouteTarget_result();
        result.success = iface.getRouteTarget(args.prefix);
        return result;
      }
    }

  }

  public static class startBgpServer_args implements org.apache.thrift.TBase<startBgpServer_args, startBgpServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startBgpServer_args");

    private static final org.apache.thrift.protocol.TField AS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("asNumber", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ROUTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("routerId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField HOLD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("holdTime", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField KEEP_ALIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("keepAliveTime", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startBgpServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startBgpServer_argsTupleSchemeFactory());
    }

    public int asNumber; // required
    public String routerId; // required
    public int port; // required
    public int holdTime; // required
    public int keepAliveTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AS_NUMBER((short)1, "asNumber"),
      ROUTER_ID((short)2, "routerId"),
      PORT((short)3, "port"),
      HOLD_TIME((short)4, "holdTime"),
      KEEP_ALIVE_TIME((short)5, "keepAliveTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AS_NUMBER
            return AS_NUMBER;
          case 2: // ROUTER_ID
            return ROUTER_ID;
          case 3: // PORT
            return PORT;
          case 4: // HOLD_TIME
            return HOLD_TIME;
          case 5: // KEEP_ALIVE_TIME
            return KEEP_ALIVE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ASNUMBER_ISSET_ID = 0;
    private static final int __PORT_ISSET_ID = 1;
    private static final int __HOLDTIME_ISSET_ID = 2;
    private static final int __KEEPALIVETIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("asNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ROUTER_ID, new org.apache.thrift.meta_data.FieldMetaData("routerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HOLD_TIME, new org.apache.thrift.meta_data.FieldMetaData("holdTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KEEP_ALIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("keepAliveTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startBgpServer_args.class, metaDataMap);
    }

    public startBgpServer_args() {
    }

    public startBgpServer_args(
      int asNumber,
      String routerId,
      int port,
      int holdTime,
      int keepAliveTime)
    {
      this();
      this.asNumber = asNumber;
      setAsNumberIsSet(true);
      this.routerId = routerId;
      this.port = port;
      setPortIsSet(true);
      this.holdTime = holdTime;
      setHoldTimeIsSet(true);
      this.keepAliveTime = keepAliveTime;
      setKeepAliveTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startBgpServer_args(startBgpServer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.asNumber = other.asNumber;
      if (other.isSetRouterId()) {
        this.routerId = other.routerId;
      }
      this.port = other.port;
      this.holdTime = other.holdTime;
      this.keepAliveTime = other.keepAliveTime;
    }

    public startBgpServer_args deepCopy() {
      return new startBgpServer_args(this);
    }

    @Override
    public void clear() {
      setAsNumberIsSet(false);
      this.asNumber = 0;
      this.routerId = null;
      setPortIsSet(false);
      this.port = 0;
      setHoldTimeIsSet(false);
      this.holdTime = 0;
      setKeepAliveTimeIsSet(false);
      this.keepAliveTime = 0;
    }

    public int getAsNumber() {
      return this.asNumber;
    }

    public startBgpServer_args setAsNumber(int asNumber) {
      this.asNumber = asNumber;
      setAsNumberIsSet(true);
      return this;
    }

    public void unsetAsNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASNUMBER_ISSET_ID);
    }

    /** Returns true if field asNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetAsNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __ASNUMBER_ISSET_ID);
    }

    public void setAsNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASNUMBER_ISSET_ID, value);
    }

    public String getRouterId() {
      return this.routerId;
    }

    public startBgpServer_args setRouterId(String routerId) {
      this.routerId = routerId;
      return this;
    }

    public void unsetRouterId() {
      this.routerId = null;
    }

    /** Returns true if field routerId is set (has been assigned a value) and false otherwise */
    public boolean isSetRouterId() {
      return this.routerId != null;
    }

    public void setRouterIdIsSet(boolean value) {
      if (!value) {
        this.routerId = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public startBgpServer_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getHoldTime() {
      return this.holdTime;
    }

    public startBgpServer_args setHoldTime(int holdTime) {
      this.holdTime = holdTime;
      setHoldTimeIsSet(true);
      return this;
    }

    public void unsetHoldTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOLDTIME_ISSET_ID);
    }

    /** Returns true if field holdTime is set (has been assigned a value) and false otherwise */
    public boolean isSetHoldTime() {
      return EncodingUtils.testBit(__isset_bitfield, __HOLDTIME_ISSET_ID);
    }

    public void setHoldTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOLDTIME_ISSET_ID, value);
    }

    public int getKeepAliveTime() {
      return this.keepAliveTime;
    }

    public startBgpServer_args setKeepAliveTime(int keepAliveTime) {
      this.keepAliveTime = keepAliveTime;
      setKeepAliveTimeIsSet(true);
      return this;
    }

    public void unsetKeepAliveTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEEPALIVETIME_ISSET_ID);
    }

    /** Returns true if field keepAliveTime is set (has been assigned a value) and false otherwise */
    public boolean isSetKeepAliveTime() {
      return EncodingUtils.testBit(__isset_bitfield, __KEEPALIVETIME_ISSET_ID);
    }

    public void setKeepAliveTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEEPALIVETIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AS_NUMBER:
        if (value == null) {
          unsetAsNumber();
        } else {
          setAsNumber((Integer)value);
        }
        break;

      case ROUTER_ID:
        if (value == null) {
          unsetRouterId();
        } else {
          setRouterId((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      case HOLD_TIME:
        if (value == null) {
          unsetHoldTime();
        } else {
          setHoldTime((Integer)value);
        }
        break;

      case KEEP_ALIVE_TIME:
        if (value == null) {
          unsetKeepAliveTime();
        } else {
          setKeepAliveTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AS_NUMBER:
        return Integer.valueOf(getAsNumber());

      case ROUTER_ID:
        return getRouterId();

      case PORT:
        return Integer.valueOf(getPort());

      case HOLD_TIME:
        return Integer.valueOf(getHoldTime());

      case KEEP_ALIVE_TIME:
        return Integer.valueOf(getKeepAliveTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AS_NUMBER:
        return isSetAsNumber();
      case ROUTER_ID:
        return isSetRouterId();
      case PORT:
        return isSetPort();
      case HOLD_TIME:
        return isSetHoldTime();
      case KEEP_ALIVE_TIME:
        return isSetKeepAliveTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startBgpServer_args)
        return this.equals((startBgpServer_args)that);
      return false;
    }

    public boolean equals(startBgpServer_args that) {
      if (that == null)
        return false;

      boolean this_present_asNumber = true;
      boolean that_present_asNumber = true;
      if (this_present_asNumber || that_present_asNumber) {
        if (!(this_present_asNumber && that_present_asNumber))
          return false;
        if (this.asNumber != that.asNumber)
          return false;
      }

      boolean this_present_routerId = true && this.isSetRouterId();
      boolean that_present_routerId = true && that.isSetRouterId();
      if (this_present_routerId || that_present_routerId) {
        if (!(this_present_routerId && that_present_routerId))
          return false;
        if (!this.routerId.equals(that.routerId))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_holdTime = true;
      boolean that_present_holdTime = true;
      if (this_present_holdTime || that_present_holdTime) {
        if (!(this_present_holdTime && that_present_holdTime))
          return false;
        if (this.holdTime != that.holdTime)
          return false;
      }

      boolean this_present_keepAliveTime = true;
      boolean that_present_keepAliveTime = true;
      if (this_present_keepAliveTime || that_present_keepAliveTime) {
        if (!(this_present_keepAliveTime && that_present_keepAliveTime))
          return false;
        if (this.keepAliveTime != that.keepAliveTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startBgpServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startBgpServer_args typedOther = (startBgpServer_args)other;

      lastComparison = Boolean.valueOf(isSetAsNumber()).compareTo(typedOther.isSetAsNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAsNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asNumber, typedOther.asNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRouterId()).compareTo(typedOther.isSetRouterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRouterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routerId, typedOther.routerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHoldTime()).compareTo(typedOther.isSetHoldTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHoldTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.holdTime, typedOther.holdTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeepAliveTime()).compareTo(typedOther.isSetKeepAliveTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeepAliveTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keepAliveTime, typedOther.keepAliveTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startBgpServer_args(");
      boolean first = true;

      sb.append("asNumber:");
      sb.append(this.asNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("routerId:");
      if (this.routerId == null) {
        sb.append("null");
      } else {
        sb.append(this.routerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("holdTime:");
      sb.append(this.holdTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("keepAliveTime:");
      sb.append(this.keepAliveTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startBgpServer_argsStandardSchemeFactory implements SchemeFactory {
      public startBgpServer_argsStandardScheme getScheme() {
        return new startBgpServer_argsStandardScheme();
      }
    }

    private static class startBgpServer_argsStandardScheme extends StandardScheme<startBgpServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startBgpServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AS_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.asNumber = iprot.readI32();
                struct.setAsNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROUTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.routerId = iprot.readString();
                struct.setRouterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HOLD_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.holdTime = iprot.readI32();
                struct.setHoldTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // KEEP_ALIVE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.keepAliveTime = iprot.readI32();
                struct.setKeepAliveTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startBgpServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(AS_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.asNumber);
        oprot.writeFieldEnd();
        if (struct.routerId != null) {
          oprot.writeFieldBegin(ROUTER_ID_FIELD_DESC);
          oprot.writeString(struct.routerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HOLD_TIME_FIELD_DESC);
        oprot.writeI32(struct.holdTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(KEEP_ALIVE_TIME_FIELD_DESC);
        oprot.writeI32(struct.keepAliveTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startBgpServer_argsTupleSchemeFactory implements SchemeFactory {
      public startBgpServer_argsTupleScheme getScheme() {
        return new startBgpServer_argsTupleScheme();
      }
    }

    private static class startBgpServer_argsTupleScheme extends TupleScheme<startBgpServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startBgpServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAsNumber()) {
          optionals.set(0);
        }
        if (struct.isSetRouterId()) {
          optionals.set(1);
        }
        if (struct.isSetPort()) {
          optionals.set(2);
        }
        if (struct.isSetHoldTime()) {
          optionals.set(3);
        }
        if (struct.isSetKeepAliveTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAsNumber()) {
          oprot.writeI32(struct.asNumber);
        }
        if (struct.isSetRouterId()) {
          oprot.writeString(struct.routerId);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetHoldTime()) {
          oprot.writeI32(struct.holdTime);
        }
        if (struct.isSetKeepAliveTime()) {
          oprot.writeI32(struct.keepAliveTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startBgpServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.asNumber = iprot.readI32();
          struct.setAsNumberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.routerId = iprot.readString();
          struct.setRouterIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(3)) {
          struct.holdTime = iprot.readI32();
          struct.setHoldTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.keepAliveTime = iprot.readI32();
          struct.setKeepAliveTimeIsSet(true);
        }
      }
    }

  }

  public static class startBgpServer_result implements org.apache.thrift.TBase<startBgpServer_result, startBgpServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startBgpServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startBgpServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startBgpServer_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startBgpServer_result.class, metaDataMap);
    }

    public startBgpServer_result() {
    }

    public startBgpServer_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startBgpServer_result(startBgpServer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public startBgpServer_result deepCopy() {
      return new startBgpServer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public startBgpServer_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startBgpServer_result)
        return this.equals((startBgpServer_result)that);
      return false;
    }

    public boolean equals(startBgpServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startBgpServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startBgpServer_result typedOther = (startBgpServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startBgpServer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startBgpServer_resultStandardSchemeFactory implements SchemeFactory {
      public startBgpServer_resultStandardScheme getScheme() {
        return new startBgpServer_resultStandardScheme();
      }
    }

    private static class startBgpServer_resultStandardScheme extends StandardScheme<startBgpServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startBgpServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startBgpServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startBgpServer_resultTupleSchemeFactory implements SchemeFactory {
      public startBgpServer_resultTupleScheme getScheme() {
        return new startBgpServer_resultTupleScheme();
      }
    }

    private static class startBgpServer_resultTupleScheme extends TupleScheme<startBgpServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startBgpServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startBgpServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stopBgpServer_args implements org.apache.thrift.TBase<stopBgpServer_args, stopBgpServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopBgpServer_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopBgpServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopBgpServer_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopBgpServer_args.class, metaDataMap);
    }

    public stopBgpServer_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopBgpServer_args(stopBgpServer_args other) {
    }

    public stopBgpServer_args deepCopy() {
      return new stopBgpServer_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopBgpServer_args)
        return this.equals((stopBgpServer_args)that);
      return false;
    }

    public boolean equals(stopBgpServer_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopBgpServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopBgpServer_args typedOther = (stopBgpServer_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopBgpServer_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopBgpServer_argsStandardSchemeFactory implements SchemeFactory {
      public stopBgpServer_argsStandardScheme getScheme() {
        return new stopBgpServer_argsStandardScheme();
      }
    }

    private static class stopBgpServer_argsStandardScheme extends StandardScheme<stopBgpServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopBgpServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopBgpServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopBgpServer_argsTupleSchemeFactory implements SchemeFactory {
      public stopBgpServer_argsTupleScheme getScheme() {
        return new stopBgpServer_argsTupleScheme();
      }
    }

    private static class stopBgpServer_argsTupleScheme extends TupleScheme<stopBgpServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopBgpServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopBgpServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class stopBgpServer_result implements org.apache.thrift.TBase<stopBgpServer_result, stopBgpServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopBgpServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopBgpServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopBgpServer_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopBgpServer_result.class, metaDataMap);
    }

    public stopBgpServer_result() {
    }

    public stopBgpServer_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopBgpServer_result(stopBgpServer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public stopBgpServer_result deepCopy() {
      return new stopBgpServer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public stopBgpServer_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopBgpServer_result)
        return this.equals((stopBgpServer_result)that);
      return false;
    }

    public boolean equals(stopBgpServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopBgpServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopBgpServer_result typedOther = (stopBgpServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopBgpServer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopBgpServer_resultStandardSchemeFactory implements SchemeFactory {
      public stopBgpServer_resultStandardScheme getScheme() {
        return new stopBgpServer_resultStandardScheme();
      }
    }

    private static class stopBgpServer_resultStandardScheme extends StandardScheme<stopBgpServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopBgpServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopBgpServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopBgpServer_resultTupleSchemeFactory implements SchemeFactory {
      public stopBgpServer_resultTupleScheme getScheme() {
        return new stopBgpServer_resultTupleScheme();
      }
    }

    private static class stopBgpServer_resultTupleScheme extends TupleScheme<stopBgpServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopBgpServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopBgpServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createPeer_args implements org.apache.thrift.TBase<createPeer_args, createPeer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPeer_args");

    private static final org.apache.thrift.protocol.TField NEIGHBOR_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("neighborIpAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("asNumber", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createPeer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createPeer_argsTupleSchemeFactory());
    }

    public String neighborIpAddress; // required
    public int asNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEIGHBOR_IP_ADDRESS((short)1, "neighborIpAddress"),
      AS_NUMBER((short)2, "asNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEIGHBOR_IP_ADDRESS
            return NEIGHBOR_IP_ADDRESS;
          case 2: // AS_NUMBER
            return AS_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ASNUMBER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEIGHBOR_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("neighborIpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("asNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPeer_args.class, metaDataMap);
    }

    public createPeer_args() {
    }

    public createPeer_args(
      String neighborIpAddress,
      int asNumber)
    {
      this();
      this.neighborIpAddress = neighborIpAddress;
      this.asNumber = asNumber;
      setAsNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPeer_args(createPeer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNeighborIpAddress()) {
        this.neighborIpAddress = other.neighborIpAddress;
      }
      this.asNumber = other.asNumber;
    }

    public createPeer_args deepCopy() {
      return new createPeer_args(this);
    }

    @Override
    public void clear() {
      this.neighborIpAddress = null;
      setAsNumberIsSet(false);
      this.asNumber = 0;
    }

    public String getNeighborIpAddress() {
      return this.neighborIpAddress;
    }

    public createPeer_args setNeighborIpAddress(String neighborIpAddress) {
      this.neighborIpAddress = neighborIpAddress;
      return this;
    }

    public void unsetNeighborIpAddress() {
      this.neighborIpAddress = null;
    }

    /** Returns true if field neighborIpAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetNeighborIpAddress() {
      return this.neighborIpAddress != null;
    }

    public void setNeighborIpAddressIsSet(boolean value) {
      if (!value) {
        this.neighborIpAddress = null;
      }
    }

    public int getAsNumber() {
      return this.asNumber;
    }

    public createPeer_args setAsNumber(int asNumber) {
      this.asNumber = asNumber;
      setAsNumberIsSet(true);
      return this;
    }

    public void unsetAsNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASNUMBER_ISSET_ID);
    }

    /** Returns true if field asNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetAsNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __ASNUMBER_ISSET_ID);
    }

    public void setAsNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASNUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        if (value == null) {
          unsetNeighborIpAddress();
        } else {
          setNeighborIpAddress((String)value);
        }
        break;

      case AS_NUMBER:
        if (value == null) {
          unsetAsNumber();
        } else {
          setAsNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        return getNeighborIpAddress();

      case AS_NUMBER:
        return Integer.valueOf(getAsNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        return isSetNeighborIpAddress();
      case AS_NUMBER:
        return isSetAsNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createPeer_args)
        return this.equals((createPeer_args)that);
      return false;
    }

    public boolean equals(createPeer_args that) {
      if (that == null)
        return false;

      boolean this_present_neighborIpAddress = true && this.isSetNeighborIpAddress();
      boolean that_present_neighborIpAddress = true && that.isSetNeighborIpAddress();
      if (this_present_neighborIpAddress || that_present_neighborIpAddress) {
        if (!(this_present_neighborIpAddress && that_present_neighborIpAddress))
          return false;
        if (!this.neighborIpAddress.equals(that.neighborIpAddress))
          return false;
      }

      boolean this_present_asNumber = true;
      boolean that_present_asNumber = true;
      if (this_present_asNumber || that_present_asNumber) {
        if (!(this_present_asNumber && that_present_asNumber))
          return false;
        if (this.asNumber != that.asNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createPeer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createPeer_args typedOther = (createPeer_args)other;

      lastComparison = Boolean.valueOf(isSetNeighborIpAddress()).compareTo(typedOther.isSetNeighborIpAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNeighborIpAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neighborIpAddress, typedOther.neighborIpAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAsNumber()).compareTo(typedOther.isSetAsNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAsNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asNumber, typedOther.asNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createPeer_args(");
      boolean first = true;

      sb.append("neighborIpAddress:");
      if (this.neighborIpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.neighborIpAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("asNumber:");
      sb.append(this.asNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPeer_argsStandardSchemeFactory implements SchemeFactory {
      public createPeer_argsStandardScheme getScheme() {
        return new createPeer_argsStandardScheme();
      }
    }

    private static class createPeer_argsStandardScheme extends StandardScheme<createPeer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPeer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEIGHBOR_IP_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.neighborIpAddress = iprot.readString();
                struct.setNeighborIpAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AS_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.asNumber = iprot.readI32();
                struct.setAsNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPeer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.neighborIpAddress != null) {
          oprot.writeFieldBegin(NEIGHBOR_IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.neighborIpAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AS_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.asNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPeer_argsTupleSchemeFactory implements SchemeFactory {
      public createPeer_argsTupleScheme getScheme() {
        return new createPeer_argsTupleScheme();
      }
    }

    private static class createPeer_argsTupleScheme extends TupleScheme<createPeer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPeer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNeighborIpAddress()) {
          optionals.set(0);
        }
        if (struct.isSetAsNumber()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNeighborIpAddress()) {
          oprot.writeString(struct.neighborIpAddress);
        }
        if (struct.isSetAsNumber()) {
          oprot.writeI32(struct.asNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPeer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.neighborIpAddress = iprot.readString();
          struct.setNeighborIpAddressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.asNumber = iprot.readI32();
          struct.setAsNumberIsSet(true);
        }
      }
    }

  }

  public static class createPeer_result implements org.apache.thrift.TBase<createPeer_result, createPeer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createPeer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createPeer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createPeer_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createPeer_result.class, metaDataMap);
    }

    public createPeer_result() {
    }

    public createPeer_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createPeer_result(createPeer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createPeer_result deepCopy() {
      return new createPeer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createPeer_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createPeer_result)
        return this.equals((createPeer_result)that);
      return false;
    }

    public boolean equals(createPeer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createPeer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createPeer_result typedOther = (createPeer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createPeer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createPeer_resultStandardSchemeFactory implements SchemeFactory {
      public createPeer_resultStandardScheme getScheme() {
        return new createPeer_resultStandardScheme();
      }
    }

    private static class createPeer_resultStandardScheme extends StandardScheme<createPeer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createPeer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createPeer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createPeer_resultTupleSchemeFactory implements SchemeFactory {
      public createPeer_resultTupleScheme getScheme() {
        return new createPeer_resultTupleScheme();
      }
    }

    private static class createPeer_resultTupleScheme extends TupleScheme<createPeer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createPeer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createPeer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deletePeer_args implements org.apache.thrift.TBase<deletePeer_args, deletePeer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePeer_args");

    private static final org.apache.thrift.protocol.TField NEIGHBOR_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("neighborIpAddress", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePeer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePeer_argsTupleSchemeFactory());
    }

    public String neighborIpAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEIGHBOR_IP_ADDRESS((short)1, "neighborIpAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEIGHBOR_IP_ADDRESS
            return NEIGHBOR_IP_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEIGHBOR_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("neighborIpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePeer_args.class, metaDataMap);
    }

    public deletePeer_args() {
    }

    public deletePeer_args(
      String neighborIpAddress)
    {
      this();
      this.neighborIpAddress = neighborIpAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePeer_args(deletePeer_args other) {
      if (other.isSetNeighborIpAddress()) {
        this.neighborIpAddress = other.neighborIpAddress;
      }
    }

    public deletePeer_args deepCopy() {
      return new deletePeer_args(this);
    }

    @Override
    public void clear() {
      this.neighborIpAddress = null;
    }

    public String getNeighborIpAddress() {
      return this.neighborIpAddress;
    }

    public deletePeer_args setNeighborIpAddress(String neighborIpAddress) {
      this.neighborIpAddress = neighborIpAddress;
      return this;
    }

    public void unsetNeighborIpAddress() {
      this.neighborIpAddress = null;
    }

    /** Returns true if field neighborIpAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetNeighborIpAddress() {
      return this.neighborIpAddress != null;
    }

    public void setNeighborIpAddressIsSet(boolean value) {
      if (!value) {
        this.neighborIpAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        if (value == null) {
          unsetNeighborIpAddress();
        } else {
          setNeighborIpAddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        return getNeighborIpAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        return isSetNeighborIpAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePeer_args)
        return this.equals((deletePeer_args)that);
      return false;
    }

    public boolean equals(deletePeer_args that) {
      if (that == null)
        return false;

      boolean this_present_neighborIpAddress = true && this.isSetNeighborIpAddress();
      boolean that_present_neighborIpAddress = true && that.isSetNeighborIpAddress();
      if (this_present_neighborIpAddress || that_present_neighborIpAddress) {
        if (!(this_present_neighborIpAddress && that_present_neighborIpAddress))
          return false;
        if (!this.neighborIpAddress.equals(that.neighborIpAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deletePeer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deletePeer_args typedOther = (deletePeer_args)other;

      lastComparison = Boolean.valueOf(isSetNeighborIpAddress()).compareTo(typedOther.isSetNeighborIpAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNeighborIpAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neighborIpAddress, typedOther.neighborIpAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePeer_args(");
      boolean first = true;

      sb.append("neighborIpAddress:");
      if (this.neighborIpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.neighborIpAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePeer_argsStandardSchemeFactory implements SchemeFactory {
      public deletePeer_argsStandardScheme getScheme() {
        return new deletePeer_argsStandardScheme();
      }
    }

    private static class deletePeer_argsStandardScheme extends StandardScheme<deletePeer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePeer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEIGHBOR_IP_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.neighborIpAddress = iprot.readString();
                struct.setNeighborIpAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePeer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.neighborIpAddress != null) {
          oprot.writeFieldBegin(NEIGHBOR_IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.neighborIpAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePeer_argsTupleSchemeFactory implements SchemeFactory {
      public deletePeer_argsTupleScheme getScheme() {
        return new deletePeer_argsTupleScheme();
      }
    }

    private static class deletePeer_argsTupleScheme extends TupleScheme<deletePeer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePeer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNeighborIpAddress()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNeighborIpAddress()) {
          oprot.writeString(struct.neighborIpAddress);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePeer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.neighborIpAddress = iprot.readString();
          struct.setNeighborIpAddressIsSet(true);
        }
      }
    }

  }

  public static class deletePeer_result implements org.apache.thrift.TBase<deletePeer_result, deletePeer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePeer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePeer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePeer_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePeer_result.class, metaDataMap);
    }

    public deletePeer_result() {
    }

    public deletePeer_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePeer_result(deletePeer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deletePeer_result deepCopy() {
      return new deletePeer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deletePeer_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePeer_result)
        return this.equals((deletePeer_result)that);
      return false;
    }

    public boolean equals(deletePeer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deletePeer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deletePeer_result typedOther = (deletePeer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePeer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePeer_resultStandardSchemeFactory implements SchemeFactory {
      public deletePeer_resultStandardScheme getScheme() {
        return new deletePeer_resultStandardScheme();
      }
    }

    private static class deletePeer_resultStandardScheme extends StandardScheme<deletePeer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePeer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePeer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePeer_resultTupleSchemeFactory implements SchemeFactory {
      public deletePeer_resultTupleScheme getScheme() {
        return new deletePeer_resultTupleScheme();
      }
    }

    private static class deletePeer_resultTupleScheme extends TupleScheme<deletePeer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePeer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePeer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRouteMapToMPBGPPeer_args implements org.apache.thrift.TBase<addRouteMapToMPBGPPeer_args, addRouteMapToMPBGPPeer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRouteMapToMPBGPPeer_args");

    private static final org.apache.thrift.protocol.TField NEIGHBOR_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("neighborIpAddress", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRouteMapToMPBGPPeer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRouteMapToMPBGPPeer_argsTupleSchemeFactory());
    }

    public String neighborIpAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEIGHBOR_IP_ADDRESS((short)1, "neighborIpAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEIGHBOR_IP_ADDRESS
            return NEIGHBOR_IP_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEIGHBOR_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("neighborIpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRouteMapToMPBGPPeer_args.class, metaDataMap);
    }

    public addRouteMapToMPBGPPeer_args() {
    }

    public addRouteMapToMPBGPPeer_args(
      String neighborIpAddress)
    {
      this();
      this.neighborIpAddress = neighborIpAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRouteMapToMPBGPPeer_args(addRouteMapToMPBGPPeer_args other) {
      if (other.isSetNeighborIpAddress()) {
        this.neighborIpAddress = other.neighborIpAddress;
      }
    }

    public addRouteMapToMPBGPPeer_args deepCopy() {
      return new addRouteMapToMPBGPPeer_args(this);
    }

    @Override
    public void clear() {
      this.neighborIpAddress = null;
    }

    public String getNeighborIpAddress() {
      return this.neighborIpAddress;
    }

    public addRouteMapToMPBGPPeer_args setNeighborIpAddress(String neighborIpAddress) {
      this.neighborIpAddress = neighborIpAddress;
      return this;
    }

    public void unsetNeighborIpAddress() {
      this.neighborIpAddress = null;
    }

    /** Returns true if field neighborIpAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetNeighborIpAddress() {
      return this.neighborIpAddress != null;
    }

    public void setNeighborIpAddressIsSet(boolean value) {
      if (!value) {
        this.neighborIpAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        if (value == null) {
          unsetNeighborIpAddress();
        } else {
          setNeighborIpAddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        return getNeighborIpAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        return isSetNeighborIpAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRouteMapToMPBGPPeer_args)
        return this.equals((addRouteMapToMPBGPPeer_args)that);
      return false;
    }

    public boolean equals(addRouteMapToMPBGPPeer_args that) {
      if (that == null)
        return false;

      boolean this_present_neighborIpAddress = true && this.isSetNeighborIpAddress();
      boolean that_present_neighborIpAddress = true && that.isSetNeighborIpAddress();
      if (this_present_neighborIpAddress || that_present_neighborIpAddress) {
        if (!(this_present_neighborIpAddress && that_present_neighborIpAddress))
          return false;
        if (!this.neighborIpAddress.equals(that.neighborIpAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addRouteMapToMPBGPPeer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addRouteMapToMPBGPPeer_args typedOther = (addRouteMapToMPBGPPeer_args)other;

      lastComparison = Boolean.valueOf(isSetNeighborIpAddress()).compareTo(typedOther.isSetNeighborIpAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNeighborIpAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neighborIpAddress, typedOther.neighborIpAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRouteMapToMPBGPPeer_args(");
      boolean first = true;

      sb.append("neighborIpAddress:");
      if (this.neighborIpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.neighborIpAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRouteMapToMPBGPPeer_argsStandardSchemeFactory implements SchemeFactory {
      public addRouteMapToMPBGPPeer_argsStandardScheme getScheme() {
        return new addRouteMapToMPBGPPeer_argsStandardScheme();
      }
    }

    private static class addRouteMapToMPBGPPeer_argsStandardScheme extends StandardScheme<addRouteMapToMPBGPPeer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRouteMapToMPBGPPeer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEIGHBOR_IP_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.neighborIpAddress = iprot.readString();
                struct.setNeighborIpAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRouteMapToMPBGPPeer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.neighborIpAddress != null) {
          oprot.writeFieldBegin(NEIGHBOR_IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.neighborIpAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRouteMapToMPBGPPeer_argsTupleSchemeFactory implements SchemeFactory {
      public addRouteMapToMPBGPPeer_argsTupleScheme getScheme() {
        return new addRouteMapToMPBGPPeer_argsTupleScheme();
      }
    }

    private static class addRouteMapToMPBGPPeer_argsTupleScheme extends TupleScheme<addRouteMapToMPBGPPeer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRouteMapToMPBGPPeer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNeighborIpAddress()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNeighborIpAddress()) {
          oprot.writeString(struct.neighborIpAddress);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRouteMapToMPBGPPeer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.neighborIpAddress = iprot.readString();
          struct.setNeighborIpAddressIsSet(true);
        }
      }
    }

  }

  public static class addRouteMapToMPBGPPeer_result implements org.apache.thrift.TBase<addRouteMapToMPBGPPeer_result, addRouteMapToMPBGPPeer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRouteMapToMPBGPPeer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRouteMapToMPBGPPeer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRouteMapToMPBGPPeer_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRouteMapToMPBGPPeer_result.class, metaDataMap);
    }

    public addRouteMapToMPBGPPeer_result() {
    }

    public addRouteMapToMPBGPPeer_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRouteMapToMPBGPPeer_result(addRouteMapToMPBGPPeer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addRouteMapToMPBGPPeer_result deepCopy() {
      return new addRouteMapToMPBGPPeer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addRouteMapToMPBGPPeer_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRouteMapToMPBGPPeer_result)
        return this.equals((addRouteMapToMPBGPPeer_result)that);
      return false;
    }

    public boolean equals(addRouteMapToMPBGPPeer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addRouteMapToMPBGPPeer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addRouteMapToMPBGPPeer_result typedOther = (addRouteMapToMPBGPPeer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRouteMapToMPBGPPeer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRouteMapToMPBGPPeer_resultStandardSchemeFactory implements SchemeFactory {
      public addRouteMapToMPBGPPeer_resultStandardScheme getScheme() {
        return new addRouteMapToMPBGPPeer_resultStandardScheme();
      }
    }

    private static class addRouteMapToMPBGPPeer_resultStandardScheme extends StandardScheme<addRouteMapToMPBGPPeer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRouteMapToMPBGPPeer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRouteMapToMPBGPPeer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRouteMapToMPBGPPeer_resultTupleSchemeFactory implements SchemeFactory {
      public addRouteMapToMPBGPPeer_resultTupleScheme getScheme() {
        return new addRouteMapToMPBGPPeer_resultTupleScheme();
      }
    }

    private static class addRouteMapToMPBGPPeer_resultTupleScheme extends TupleScheme<addRouteMapToMPBGPPeer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRouteMapToMPBGPPeer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRouteMapToMPBGPPeer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteRouteMapToMPBGPPeer_args implements org.apache.thrift.TBase<deleteRouteMapToMPBGPPeer_args, deleteRouteMapToMPBGPPeer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRouteMapToMPBGPPeer_args");

    private static final org.apache.thrift.protocol.TField NEIGHBOR_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("neighborIpAddress", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRouteMapToMPBGPPeer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRouteMapToMPBGPPeer_argsTupleSchemeFactory());
    }

    public String neighborIpAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEIGHBOR_IP_ADDRESS((short)1, "neighborIpAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEIGHBOR_IP_ADDRESS
            return NEIGHBOR_IP_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEIGHBOR_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("neighborIpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRouteMapToMPBGPPeer_args.class, metaDataMap);
    }

    public deleteRouteMapToMPBGPPeer_args() {
    }

    public deleteRouteMapToMPBGPPeer_args(
      String neighborIpAddress)
    {
      this();
      this.neighborIpAddress = neighborIpAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRouteMapToMPBGPPeer_args(deleteRouteMapToMPBGPPeer_args other) {
      if (other.isSetNeighborIpAddress()) {
        this.neighborIpAddress = other.neighborIpAddress;
      }
    }

    public deleteRouteMapToMPBGPPeer_args deepCopy() {
      return new deleteRouteMapToMPBGPPeer_args(this);
    }

    @Override
    public void clear() {
      this.neighborIpAddress = null;
    }

    public String getNeighborIpAddress() {
      return this.neighborIpAddress;
    }

    public deleteRouteMapToMPBGPPeer_args setNeighborIpAddress(String neighborIpAddress) {
      this.neighborIpAddress = neighborIpAddress;
      return this;
    }

    public void unsetNeighborIpAddress() {
      this.neighborIpAddress = null;
    }

    /** Returns true if field neighborIpAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetNeighborIpAddress() {
      return this.neighborIpAddress != null;
    }

    public void setNeighborIpAddressIsSet(boolean value) {
      if (!value) {
        this.neighborIpAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        if (value == null) {
          unsetNeighborIpAddress();
        } else {
          setNeighborIpAddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        return getNeighborIpAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEIGHBOR_IP_ADDRESS:
        return isSetNeighborIpAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRouteMapToMPBGPPeer_args)
        return this.equals((deleteRouteMapToMPBGPPeer_args)that);
      return false;
    }

    public boolean equals(deleteRouteMapToMPBGPPeer_args that) {
      if (that == null)
        return false;

      boolean this_present_neighborIpAddress = true && this.isSetNeighborIpAddress();
      boolean that_present_neighborIpAddress = true && that.isSetNeighborIpAddress();
      if (this_present_neighborIpAddress || that_present_neighborIpAddress) {
        if (!(this_present_neighborIpAddress && that_present_neighborIpAddress))
          return false;
        if (!this.neighborIpAddress.equals(that.neighborIpAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteRouteMapToMPBGPPeer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteRouteMapToMPBGPPeer_args typedOther = (deleteRouteMapToMPBGPPeer_args)other;

      lastComparison = Boolean.valueOf(isSetNeighborIpAddress()).compareTo(typedOther.isSetNeighborIpAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNeighborIpAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neighborIpAddress, typedOther.neighborIpAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRouteMapToMPBGPPeer_args(");
      boolean first = true;

      sb.append("neighborIpAddress:");
      if (this.neighborIpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.neighborIpAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRouteMapToMPBGPPeer_argsStandardSchemeFactory implements SchemeFactory {
      public deleteRouteMapToMPBGPPeer_argsStandardScheme getScheme() {
        return new deleteRouteMapToMPBGPPeer_argsStandardScheme();
      }
    }

    private static class deleteRouteMapToMPBGPPeer_argsStandardScheme extends StandardScheme<deleteRouteMapToMPBGPPeer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRouteMapToMPBGPPeer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEIGHBOR_IP_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.neighborIpAddress = iprot.readString();
                struct.setNeighborIpAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRouteMapToMPBGPPeer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.neighborIpAddress != null) {
          oprot.writeFieldBegin(NEIGHBOR_IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.neighborIpAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRouteMapToMPBGPPeer_argsTupleSchemeFactory implements SchemeFactory {
      public deleteRouteMapToMPBGPPeer_argsTupleScheme getScheme() {
        return new deleteRouteMapToMPBGPPeer_argsTupleScheme();
      }
    }

    private static class deleteRouteMapToMPBGPPeer_argsTupleScheme extends TupleScheme<deleteRouteMapToMPBGPPeer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRouteMapToMPBGPPeer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNeighborIpAddress()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNeighborIpAddress()) {
          oprot.writeString(struct.neighborIpAddress);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRouteMapToMPBGPPeer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.neighborIpAddress = iprot.readString();
          struct.setNeighborIpAddressIsSet(true);
        }
      }
    }

  }

  public static class deleteRouteMapToMPBGPPeer_result implements org.apache.thrift.TBase<deleteRouteMapToMPBGPPeer_result, deleteRouteMapToMPBGPPeer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRouteMapToMPBGPPeer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRouteMapToMPBGPPeer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRouteMapToMPBGPPeer_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRouteMapToMPBGPPeer_result.class, metaDataMap);
    }

    public deleteRouteMapToMPBGPPeer_result() {
    }

    public deleteRouteMapToMPBGPPeer_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRouteMapToMPBGPPeer_result(deleteRouteMapToMPBGPPeer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteRouteMapToMPBGPPeer_result deepCopy() {
      return new deleteRouteMapToMPBGPPeer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteRouteMapToMPBGPPeer_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRouteMapToMPBGPPeer_result)
        return this.equals((deleteRouteMapToMPBGPPeer_result)that);
      return false;
    }

    public boolean equals(deleteRouteMapToMPBGPPeer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteRouteMapToMPBGPPeer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteRouteMapToMPBGPPeer_result typedOther = (deleteRouteMapToMPBGPPeer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRouteMapToMPBGPPeer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRouteMapToMPBGPPeer_resultStandardSchemeFactory implements SchemeFactory {
      public deleteRouteMapToMPBGPPeer_resultStandardScheme getScheme() {
        return new deleteRouteMapToMPBGPPeer_resultStandardScheme();
      }
    }

    private static class deleteRouteMapToMPBGPPeer_resultStandardScheme extends StandardScheme<deleteRouteMapToMPBGPPeer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRouteMapToMPBGPPeer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRouteMapToMPBGPPeer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRouteMapToMPBGPPeer_resultTupleSchemeFactory implements SchemeFactory {
      public deleteRouteMapToMPBGPPeer_resultTupleScheme getScheme() {
        return new deleteRouteMapToMPBGPPeer_resultTupleScheme();
      }
    }

    private static class deleteRouteMapToMPBGPPeer_resultTupleScheme extends TupleScheme<deleteRouteMapToMPBGPPeer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRouteMapToMPBGPPeer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRouteMapToMPBGPPeer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addVrf_args implements org.apache.thrift.TBase<addVrf_args, addVrf_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVrf_args");

    private static final org.apache.thrift.protocol.TField RD_FIELD_DESC = new org.apache.thrift.protocol.TField("rd", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IRTS_FIELD_DESC = new org.apache.thrift.protocol.TField("irts", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ERTS_FIELD_DESC = new org.apache.thrift.protocol.TField("erts", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVrf_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVrf_argsTupleSchemeFactory());
    }

    public String rd; // required
    public List<String> irts; // required
    public List<String> erts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RD((short)1, "rd"),
      IRTS((short)2, "irts"),
      ERTS((short)3, "erts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RD
            return RD;
          case 2: // IRTS
            return IRTS;
          case 3: // ERTS
            return ERTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RD, new org.apache.thrift.meta_data.FieldMetaData("rd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRTS, new org.apache.thrift.meta_data.FieldMetaData("irts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ERTS, new org.apache.thrift.meta_data.FieldMetaData("erts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVrf_args.class, metaDataMap);
    }

    public addVrf_args() {
    }

    public addVrf_args(
      String rd,
      List<String> irts,
      List<String> erts)
    {
      this();
      this.rd = rd;
      this.irts = irts;
      this.erts = erts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVrf_args(addVrf_args other) {
      if (other.isSetRd()) {
        this.rd = other.rd;
      }
      if (other.isSetIrts()) {
        List<String> __this__irts = new ArrayList<String>();
        for (String other_element : other.irts) {
          __this__irts.add(other_element);
        }
        this.irts = __this__irts;
      }
      if (other.isSetErts()) {
        List<String> __this__erts = new ArrayList<String>();
        for (String other_element : other.erts) {
          __this__erts.add(other_element);
        }
        this.erts = __this__erts;
      }
    }

    public addVrf_args deepCopy() {
      return new addVrf_args(this);
    }

    @Override
    public void clear() {
      this.rd = null;
      this.irts = null;
      this.erts = null;
    }

    public String getRd() {
      return this.rd;
    }

    public addVrf_args setRd(String rd) {
      this.rd = rd;
      return this;
    }

    public void unsetRd() {
      this.rd = null;
    }

    /** Returns true if field rd is set (has been assigned a value) and false otherwise */
    public boolean isSetRd() {
      return this.rd != null;
    }

    public void setRdIsSet(boolean value) {
      if (!value) {
        this.rd = null;
      }
    }

    public int getIrtsSize() {
      return (this.irts == null) ? 0 : this.irts.size();
    }

    public java.util.Iterator<String> getIrtsIterator() {
      return (this.irts == null) ? null : this.irts.iterator();
    }

    public void addToIrts(String elem) {
      if (this.irts == null) {
        this.irts = new ArrayList<String>();
      }
      this.irts.add(elem);
    }

    public List<String> getIrts() {
      return this.irts;
    }

    public addVrf_args setIrts(List<String> irts) {
      this.irts = irts;
      return this;
    }

    public void unsetIrts() {
      this.irts = null;
    }

    /** Returns true if field irts is set (has been assigned a value) and false otherwise */
    public boolean isSetIrts() {
      return this.irts != null;
    }

    public void setIrtsIsSet(boolean value) {
      if (!value) {
        this.irts = null;
      }
    }

    public int getErtsSize() {
      return (this.erts == null) ? 0 : this.erts.size();
    }

    public java.util.Iterator<String> getErtsIterator() {
      return (this.erts == null) ? null : this.erts.iterator();
    }

    public void addToErts(String elem) {
      if (this.erts == null) {
        this.erts = new ArrayList<String>();
      }
      this.erts.add(elem);
    }

    public List<String> getErts() {
      return this.erts;
    }

    public addVrf_args setErts(List<String> erts) {
      this.erts = erts;
      return this;
    }

    public void unsetErts() {
      this.erts = null;
    }

    /** Returns true if field erts is set (has been assigned a value) and false otherwise */
    public boolean isSetErts() {
      return this.erts != null;
    }

    public void setErtsIsSet(boolean value) {
      if (!value) {
        this.erts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RD:
        if (value == null) {
          unsetRd();
        } else {
          setRd((String)value);
        }
        break;

      case IRTS:
        if (value == null) {
          unsetIrts();
        } else {
          setIrts((List<String>)value);
        }
        break;

      case ERTS:
        if (value == null) {
          unsetErts();
        } else {
          setErts((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RD:
        return getRd();

      case IRTS:
        return getIrts();

      case ERTS:
        return getErts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RD:
        return isSetRd();
      case IRTS:
        return isSetIrts();
      case ERTS:
        return isSetErts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVrf_args)
        return this.equals((addVrf_args)that);
      return false;
    }

    public boolean equals(addVrf_args that) {
      if (that == null)
        return false;

      boolean this_present_rd = true && this.isSetRd();
      boolean that_present_rd = true && that.isSetRd();
      if (this_present_rd || that_present_rd) {
        if (!(this_present_rd && that_present_rd))
          return false;
        if (!this.rd.equals(that.rd))
          return false;
      }

      boolean this_present_irts = true && this.isSetIrts();
      boolean that_present_irts = true && that.isSetIrts();
      if (this_present_irts || that_present_irts) {
        if (!(this_present_irts && that_present_irts))
          return false;
        if (!this.irts.equals(that.irts))
          return false;
      }

      boolean this_present_erts = true && this.isSetErts();
      boolean that_present_erts = true && that.isSetErts();
      if (this_present_erts || that_present_erts) {
        if (!(this_present_erts && that_present_erts))
          return false;
        if (!this.erts.equals(that.erts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addVrf_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addVrf_args typedOther = (addVrf_args)other;

      lastComparison = Boolean.valueOf(isSetRd()).compareTo(typedOther.isSetRd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rd, typedOther.rd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIrts()).compareTo(typedOther.isSetIrts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIrts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.irts, typedOther.irts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErts()).compareTo(typedOther.isSetErts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.erts, typedOther.erts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVrf_args(");
      boolean first = true;

      sb.append("rd:");
      if (this.rd == null) {
        sb.append("null");
      } else {
        sb.append(this.rd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("irts:");
      if (this.irts == null) {
        sb.append("null");
      } else {
        sb.append(this.irts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("erts:");
      if (this.erts == null) {
        sb.append("null");
      } else {
        sb.append(this.erts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVrf_argsStandardSchemeFactory implements SchemeFactory {
      public addVrf_argsStandardScheme getScheme() {
        return new addVrf_argsStandardScheme();
      }
    }

    private static class addVrf_argsStandardScheme extends StandardScheme<addVrf_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVrf_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rd = iprot.readString();
                struct.setRdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IRTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.irts = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.irts.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setIrtsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                  struct.erts = new ArrayList<String>(_list11.size);
                  for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                  {
                    String _elem13; // required
                    _elem13 = iprot.readString();
                    struct.erts.add(_elem13);
                  }
                  iprot.readListEnd();
                }
                struct.setErtsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVrf_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rd != null) {
          oprot.writeFieldBegin(RD_FIELD_DESC);
          oprot.writeString(struct.rd);
          oprot.writeFieldEnd();
        }
        if (struct.irts != null) {
          oprot.writeFieldBegin(IRTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.irts.size()));
            for (String _iter14 : struct.irts)
            {
              oprot.writeString(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.erts != null) {
          oprot.writeFieldBegin(ERTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.erts.size()));
            for (String _iter15 : struct.erts)
            {
              oprot.writeString(_iter15);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVrf_argsTupleSchemeFactory implements SchemeFactory {
      public addVrf_argsTupleScheme getScheme() {
        return new addVrf_argsTupleScheme();
      }
    }

    private static class addVrf_argsTupleScheme extends TupleScheme<addVrf_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVrf_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRd()) {
          optionals.set(0);
        }
        if (struct.isSetIrts()) {
          optionals.set(1);
        }
        if (struct.isSetErts()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRd()) {
          oprot.writeString(struct.rd);
        }
        if (struct.isSetIrts()) {
          {
            oprot.writeI32(struct.irts.size());
            for (String _iter16 : struct.irts)
            {
              oprot.writeString(_iter16);
            }
          }
        }
        if (struct.isSetErts()) {
          {
            oprot.writeI32(struct.erts.size());
            for (String _iter17 : struct.erts)
            {
              oprot.writeString(_iter17);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVrf_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rd = iprot.readString();
          struct.setRdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.irts = new ArrayList<String>(_list18.size);
            for (int _i19 = 0; _i19 < _list18.size; ++_i19)
            {
              String _elem20; // required
              _elem20 = iprot.readString();
              struct.irts.add(_elem20);
            }
          }
          struct.setIrtsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.erts = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.erts.add(_elem23);
            }
          }
          struct.setErtsIsSet(true);
        }
      }
    }

  }

  public static class addVrf_result implements org.apache.thrift.TBase<addVrf_result, addVrf_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVrf_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVrf_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVrf_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVrf_result.class, metaDataMap);
    }

    public addVrf_result() {
    }

    public addVrf_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVrf_result(addVrf_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addVrf_result deepCopy() {
      return new addVrf_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addVrf_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVrf_result)
        return this.equals((addVrf_result)that);
      return false;
    }

    public boolean equals(addVrf_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addVrf_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addVrf_result typedOther = (addVrf_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVrf_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVrf_resultStandardSchemeFactory implements SchemeFactory {
      public addVrf_resultStandardScheme getScheme() {
        return new addVrf_resultStandardScheme();
      }
    }

    private static class addVrf_resultStandardScheme extends StandardScheme<addVrf_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVrf_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVrf_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVrf_resultTupleSchemeFactory implements SchemeFactory {
      public addVrf_resultTupleScheme getScheme() {
        return new addVrf_resultTupleScheme();
      }
    }

    private static class addVrf_resultTupleScheme extends TupleScheme<addVrf_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVrf_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVrf_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delVrf_args implements org.apache.thrift.TBase<delVrf_args, delVrf_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delVrf_args");

    private static final org.apache.thrift.protocol.TField RD_FIELD_DESC = new org.apache.thrift.protocol.TField("rd", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delVrf_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delVrf_argsTupleSchemeFactory());
    }

    public String rd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RD((short)1, "rd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RD
            return RD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RD, new org.apache.thrift.meta_data.FieldMetaData("rd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delVrf_args.class, metaDataMap);
    }

    public delVrf_args() {
    }

    public delVrf_args(
      String rd)
    {
      this();
      this.rd = rd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delVrf_args(delVrf_args other) {
      if (other.isSetRd()) {
        this.rd = other.rd;
      }
    }

    public delVrf_args deepCopy() {
      return new delVrf_args(this);
    }

    @Override
    public void clear() {
      this.rd = null;
    }

    public String getRd() {
      return this.rd;
    }

    public delVrf_args setRd(String rd) {
      this.rd = rd;
      return this;
    }

    public void unsetRd() {
      this.rd = null;
    }

    /** Returns true if field rd is set (has been assigned a value) and false otherwise */
    public boolean isSetRd() {
      return this.rd != null;
    }

    public void setRdIsSet(boolean value) {
      if (!value) {
        this.rd = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RD:
        if (value == null) {
          unsetRd();
        } else {
          setRd((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RD:
        return getRd();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RD:
        return isSetRd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delVrf_args)
        return this.equals((delVrf_args)that);
      return false;
    }

    public boolean equals(delVrf_args that) {
      if (that == null)
        return false;

      boolean this_present_rd = true && this.isSetRd();
      boolean that_present_rd = true && that.isSetRd();
      if (this_present_rd || that_present_rd) {
        if (!(this_present_rd && that_present_rd))
          return false;
        if (!this.rd.equals(that.rd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delVrf_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delVrf_args typedOther = (delVrf_args)other;

      lastComparison = Boolean.valueOf(isSetRd()).compareTo(typedOther.isSetRd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rd, typedOther.rd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delVrf_args(");
      boolean first = true;

      sb.append("rd:");
      if (this.rd == null) {
        sb.append("null");
      } else {
        sb.append(this.rd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delVrf_argsStandardSchemeFactory implements SchemeFactory {
      public delVrf_argsStandardScheme getScheme() {
        return new delVrf_argsStandardScheme();
      }
    }

    private static class delVrf_argsStandardScheme extends StandardScheme<delVrf_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delVrf_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rd = iprot.readString();
                struct.setRdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delVrf_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rd != null) {
          oprot.writeFieldBegin(RD_FIELD_DESC);
          oprot.writeString(struct.rd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delVrf_argsTupleSchemeFactory implements SchemeFactory {
      public delVrf_argsTupleScheme getScheme() {
        return new delVrf_argsTupleScheme();
      }
    }

    private static class delVrf_argsTupleScheme extends TupleScheme<delVrf_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delVrf_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRd()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRd()) {
          oprot.writeString(struct.rd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delVrf_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rd = iprot.readString();
          struct.setRdIsSet(true);
        }
      }
    }

  }

  public static class delVrf_result implements org.apache.thrift.TBase<delVrf_result, delVrf_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delVrf_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delVrf_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delVrf_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delVrf_result.class, metaDataMap);
    }

    public delVrf_result() {
    }

    public delVrf_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delVrf_result(delVrf_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delVrf_result deepCopy() {
      return new delVrf_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delVrf_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delVrf_result)
        return this.equals((delVrf_result)that);
      return false;
    }

    public boolean equals(delVrf_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delVrf_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delVrf_result typedOther = (delVrf_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delVrf_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delVrf_resultStandardSchemeFactory implements SchemeFactory {
      public delVrf_resultStandardScheme getScheme() {
        return new delVrf_resultStandardScheme();
      }
    }

    private static class delVrf_resultStandardScheme extends StandardScheme<delVrf_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delVrf_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delVrf_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delVrf_resultTupleSchemeFactory implements SchemeFactory {
      public delVrf_resultTupleScheme getScheme() {
        return new delVrf_resultTupleScheme();
      }
    }

    private static class delVrf_resultTupleScheme extends TupleScheme<delVrf_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delVrf_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delVrf_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pushRoute_args implements org.apache.thrift.TBase<pushRoute_args, pushRoute_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushRoute_args");

    private static final org.apache.thrift.protocol.TField PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VPN_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("vpnNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NEIGHBOR_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("neighborIpAddress", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushRoute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushRoute_argsTupleSchemeFactory());
    }

    public String prefix; // required
    public int vpnNum; // required
    public String neighborIpAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PREFIX((short)1, "prefix"),
      VPN_NUM((short)2, "vpnNum"),
      NEIGHBOR_IP_ADDRESS((short)3, "neighborIpAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PREFIX
            return PREFIX;
          case 2: // VPN_NUM
            return VPN_NUM;
          case 3: // NEIGHBOR_IP_ADDRESS
            return NEIGHBOR_IP_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VPNNUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PREFIX, new org.apache.thrift.meta_data.FieldMetaData("prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VPN_NUM, new org.apache.thrift.meta_data.FieldMetaData("vpnNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEIGHBOR_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("neighborIpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushRoute_args.class, metaDataMap);
    }

    public pushRoute_args() {
    }

    public pushRoute_args(
      String prefix,
      int vpnNum,
      String neighborIpAddress)
    {
      this();
      this.prefix = prefix;
      this.vpnNum = vpnNum;
      setVpnNumIsSet(true);
      this.neighborIpAddress = neighborIpAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushRoute_args(pushRoute_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPrefix()) {
        this.prefix = other.prefix;
      }
      this.vpnNum = other.vpnNum;
      if (other.isSetNeighborIpAddress()) {
        this.neighborIpAddress = other.neighborIpAddress;
      }
    }

    public pushRoute_args deepCopy() {
      return new pushRoute_args(this);
    }

    @Override
    public void clear() {
      this.prefix = null;
      setVpnNumIsSet(false);
      this.vpnNum = 0;
      this.neighborIpAddress = null;
    }

    public String getPrefix() {
      return this.prefix;
    }

    public pushRoute_args setPrefix(String prefix) {
      this.prefix = prefix;
      return this;
    }

    public void unsetPrefix() {
      this.prefix = null;
    }

    /** Returns true if field prefix is set (has been assigned a value) and false otherwise */
    public boolean isSetPrefix() {
      return this.prefix != null;
    }

    public void setPrefixIsSet(boolean value) {
      if (!value) {
        this.prefix = null;
      }
    }

    public int getVpnNum() {
      return this.vpnNum;
    }

    public pushRoute_args setVpnNum(int vpnNum) {
      this.vpnNum = vpnNum;
      setVpnNumIsSet(true);
      return this;
    }

    public void unsetVpnNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPNNUM_ISSET_ID);
    }

    /** Returns true if field vpnNum is set (has been assigned a value) and false otherwise */
    public boolean isSetVpnNum() {
      return EncodingUtils.testBit(__isset_bitfield, __VPNNUM_ISSET_ID);
    }

    public void setVpnNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPNNUM_ISSET_ID, value);
    }

    public String getNeighborIpAddress() {
      return this.neighborIpAddress;
    }

    public pushRoute_args setNeighborIpAddress(String neighborIpAddress) {
      this.neighborIpAddress = neighborIpAddress;
      return this;
    }

    public void unsetNeighborIpAddress() {
      this.neighborIpAddress = null;
    }

    /** Returns true if field neighborIpAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetNeighborIpAddress() {
      return this.neighborIpAddress != null;
    }

    public void setNeighborIpAddressIsSet(boolean value) {
      if (!value) {
        this.neighborIpAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PREFIX:
        if (value == null) {
          unsetPrefix();
        } else {
          setPrefix((String)value);
        }
        break;

      case VPN_NUM:
        if (value == null) {
          unsetVpnNum();
        } else {
          setVpnNum((Integer)value);
        }
        break;

      case NEIGHBOR_IP_ADDRESS:
        if (value == null) {
          unsetNeighborIpAddress();
        } else {
          setNeighborIpAddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PREFIX:
        return getPrefix();

      case VPN_NUM:
        return Integer.valueOf(getVpnNum());

      case NEIGHBOR_IP_ADDRESS:
        return getNeighborIpAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PREFIX:
        return isSetPrefix();
      case VPN_NUM:
        return isSetVpnNum();
      case NEIGHBOR_IP_ADDRESS:
        return isSetNeighborIpAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushRoute_args)
        return this.equals((pushRoute_args)that);
      return false;
    }

    public boolean equals(pushRoute_args that) {
      if (that == null)
        return false;

      boolean this_present_prefix = true && this.isSetPrefix();
      boolean that_present_prefix = true && that.isSetPrefix();
      if (this_present_prefix || that_present_prefix) {
        if (!(this_present_prefix && that_present_prefix))
          return false;
        if (!this.prefix.equals(that.prefix))
          return false;
      }

      boolean this_present_vpnNum = true;
      boolean that_present_vpnNum = true;
      if (this_present_vpnNum || that_present_vpnNum) {
        if (!(this_present_vpnNum && that_present_vpnNum))
          return false;
        if (this.vpnNum != that.vpnNum)
          return false;
      }

      boolean this_present_neighborIpAddress = true && this.isSetNeighborIpAddress();
      boolean that_present_neighborIpAddress = true && that.isSetNeighborIpAddress();
      if (this_present_neighborIpAddress || that_present_neighborIpAddress) {
        if (!(this_present_neighborIpAddress && that_present_neighborIpAddress))
          return false;
        if (!this.neighborIpAddress.equals(that.neighborIpAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pushRoute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pushRoute_args typedOther = (pushRoute_args)other;

      lastComparison = Boolean.valueOf(isSetPrefix()).compareTo(typedOther.isSetPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix, typedOther.prefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVpnNum()).compareTo(typedOther.isSetVpnNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVpnNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpnNum, typedOther.vpnNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNeighborIpAddress()).compareTo(typedOther.isSetNeighborIpAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNeighborIpAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neighborIpAddress, typedOther.neighborIpAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushRoute_args(");
      boolean first = true;

      sb.append("prefix:");
      if (this.prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.prefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vpnNum:");
      sb.append(this.vpnNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("neighborIpAddress:");
      if (this.neighborIpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.neighborIpAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushRoute_argsStandardSchemeFactory implements SchemeFactory {
      public pushRoute_argsStandardScheme getScheme() {
        return new pushRoute_argsStandardScheme();
      }
    }

    private static class pushRoute_argsStandardScheme extends StandardScheme<pushRoute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushRoute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.prefix = iprot.readString();
                struct.setPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VPN_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vpnNum = iprot.readI32();
                struct.setVpnNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEIGHBOR_IP_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.neighborIpAddress = iprot.readString();
                struct.setNeighborIpAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushRoute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.prefix != null) {
          oprot.writeFieldBegin(PREFIX_FIELD_DESC);
          oprot.writeString(struct.prefix);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VPN_NUM_FIELD_DESC);
        oprot.writeI32(struct.vpnNum);
        oprot.writeFieldEnd();
        if (struct.neighborIpAddress != null) {
          oprot.writeFieldBegin(NEIGHBOR_IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.neighborIpAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushRoute_argsTupleSchemeFactory implements SchemeFactory {
      public pushRoute_argsTupleScheme getScheme() {
        return new pushRoute_argsTupleScheme();
      }
    }

    private static class pushRoute_argsTupleScheme extends TupleScheme<pushRoute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushRoute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetVpnNum()) {
          optionals.set(1);
        }
        if (struct.isSetNeighborIpAddress()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPrefix()) {
          oprot.writeString(struct.prefix);
        }
        if (struct.isSetVpnNum()) {
          oprot.writeI32(struct.vpnNum);
        }
        if (struct.isSetNeighborIpAddress()) {
          oprot.writeString(struct.neighborIpAddress);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushRoute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.prefix = iprot.readString();
          struct.setPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vpnNum = iprot.readI32();
          struct.setVpnNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.neighborIpAddress = iprot.readString();
          struct.setNeighborIpAddressIsSet(true);
        }
      }
    }

  }

  public static class pushRoute_result implements org.apache.thrift.TBase<pushRoute_result, pushRoute_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushRoute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushRoute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushRoute_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushRoute_result.class, metaDataMap);
    }

    public pushRoute_result() {
    }

    public pushRoute_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushRoute_result(pushRoute_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public pushRoute_result deepCopy() {
      return new pushRoute_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public pushRoute_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushRoute_result)
        return this.equals((pushRoute_result)that);
      return false;
    }

    public boolean equals(pushRoute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pushRoute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pushRoute_result typedOther = (pushRoute_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushRoute_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushRoute_resultStandardSchemeFactory implements SchemeFactory {
      public pushRoute_resultStandardScheme getScheme() {
        return new pushRoute_resultStandardScheme();
      }
    }

    private static class pushRoute_resultStandardScheme extends StandardScheme<pushRoute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushRoute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushRoute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushRoute_resultTupleSchemeFactory implements SchemeFactory {
      public pushRoute_resultTupleScheme getScheme() {
        return new pushRoute_resultTupleScheme();
      }
    }

    private static class pushRoute_resultTupleScheme extends TupleScheme<pushRoute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushRoute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushRoute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class withdrawRoute_args implements org.apache.thrift.TBase<withdrawRoute_args, withdrawRoute_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("withdrawRoute_args");

    private static final org.apache.thrift.protocol.TField PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VPN_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("vpnNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NEIGHBOR_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("neighborIpAddress", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new withdrawRoute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new withdrawRoute_argsTupleSchemeFactory());
    }

    public String prefix; // required
    public int vpnNum; // required
    public String neighborIpAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PREFIX((short)1, "prefix"),
      VPN_NUM((short)2, "vpnNum"),
      NEIGHBOR_IP_ADDRESS((short)3, "neighborIpAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PREFIX
            return PREFIX;
          case 2: // VPN_NUM
            return VPN_NUM;
          case 3: // NEIGHBOR_IP_ADDRESS
            return NEIGHBOR_IP_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VPNNUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PREFIX, new org.apache.thrift.meta_data.FieldMetaData("prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VPN_NUM, new org.apache.thrift.meta_data.FieldMetaData("vpnNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEIGHBOR_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("neighborIpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(withdrawRoute_args.class, metaDataMap);
    }

    public withdrawRoute_args() {
    }

    public withdrawRoute_args(
      String prefix,
      int vpnNum,
      String neighborIpAddress)
    {
      this();
      this.prefix = prefix;
      this.vpnNum = vpnNum;
      setVpnNumIsSet(true);
      this.neighborIpAddress = neighborIpAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public withdrawRoute_args(withdrawRoute_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPrefix()) {
        this.prefix = other.prefix;
      }
      this.vpnNum = other.vpnNum;
      if (other.isSetNeighborIpAddress()) {
        this.neighborIpAddress = other.neighborIpAddress;
      }
    }

    public withdrawRoute_args deepCopy() {
      return new withdrawRoute_args(this);
    }

    @Override
    public void clear() {
      this.prefix = null;
      setVpnNumIsSet(false);
      this.vpnNum = 0;
      this.neighborIpAddress = null;
    }

    public String getPrefix() {
      return this.prefix;
    }

    public withdrawRoute_args setPrefix(String prefix) {
      this.prefix = prefix;
      return this;
    }

    public void unsetPrefix() {
      this.prefix = null;
    }

    /** Returns true if field prefix is set (has been assigned a value) and false otherwise */
    public boolean isSetPrefix() {
      return this.prefix != null;
    }

    public void setPrefixIsSet(boolean value) {
      if (!value) {
        this.prefix = null;
      }
    }

    public int getVpnNum() {
      return this.vpnNum;
    }

    public withdrawRoute_args setVpnNum(int vpnNum) {
      this.vpnNum = vpnNum;
      setVpnNumIsSet(true);
      return this;
    }

    public void unsetVpnNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPNNUM_ISSET_ID);
    }

    /** Returns true if field vpnNum is set (has been assigned a value) and false otherwise */
    public boolean isSetVpnNum() {
      return EncodingUtils.testBit(__isset_bitfield, __VPNNUM_ISSET_ID);
    }

    public void setVpnNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPNNUM_ISSET_ID, value);
    }

    public String getNeighborIpAddress() {
      return this.neighborIpAddress;
    }

    public withdrawRoute_args setNeighborIpAddress(String neighborIpAddress) {
      this.neighborIpAddress = neighborIpAddress;
      return this;
    }

    public void unsetNeighborIpAddress() {
      this.neighborIpAddress = null;
    }

    /** Returns true if field neighborIpAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetNeighborIpAddress() {
      return this.neighborIpAddress != null;
    }

    public void setNeighborIpAddressIsSet(boolean value) {
      if (!value) {
        this.neighborIpAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PREFIX:
        if (value == null) {
          unsetPrefix();
        } else {
          setPrefix((String)value);
        }
        break;

      case VPN_NUM:
        if (value == null) {
          unsetVpnNum();
        } else {
          setVpnNum((Integer)value);
        }
        break;

      case NEIGHBOR_IP_ADDRESS:
        if (value == null) {
          unsetNeighborIpAddress();
        } else {
          setNeighborIpAddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PREFIX:
        return getPrefix();

      case VPN_NUM:
        return Integer.valueOf(getVpnNum());

      case NEIGHBOR_IP_ADDRESS:
        return getNeighborIpAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PREFIX:
        return isSetPrefix();
      case VPN_NUM:
        return isSetVpnNum();
      case NEIGHBOR_IP_ADDRESS:
        return isSetNeighborIpAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof withdrawRoute_args)
        return this.equals((withdrawRoute_args)that);
      return false;
    }

    public boolean equals(withdrawRoute_args that) {
      if (that == null)
        return false;

      boolean this_present_prefix = true && this.isSetPrefix();
      boolean that_present_prefix = true && that.isSetPrefix();
      if (this_present_prefix || that_present_prefix) {
        if (!(this_present_prefix && that_present_prefix))
          return false;
        if (!this.prefix.equals(that.prefix))
          return false;
      }

      boolean this_present_vpnNum = true;
      boolean that_present_vpnNum = true;
      if (this_present_vpnNum || that_present_vpnNum) {
        if (!(this_present_vpnNum && that_present_vpnNum))
          return false;
        if (this.vpnNum != that.vpnNum)
          return false;
      }

      boolean this_present_neighborIpAddress = true && this.isSetNeighborIpAddress();
      boolean that_present_neighborIpAddress = true && that.isSetNeighborIpAddress();
      if (this_present_neighborIpAddress || that_present_neighborIpAddress) {
        if (!(this_present_neighborIpAddress && that_present_neighborIpAddress))
          return false;
        if (!this.neighborIpAddress.equals(that.neighborIpAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(withdrawRoute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      withdrawRoute_args typedOther = (withdrawRoute_args)other;

      lastComparison = Boolean.valueOf(isSetPrefix()).compareTo(typedOther.isSetPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix, typedOther.prefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVpnNum()).compareTo(typedOther.isSetVpnNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVpnNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpnNum, typedOther.vpnNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNeighborIpAddress()).compareTo(typedOther.isSetNeighborIpAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNeighborIpAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neighborIpAddress, typedOther.neighborIpAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("withdrawRoute_args(");
      boolean first = true;

      sb.append("prefix:");
      if (this.prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.prefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vpnNum:");
      sb.append(this.vpnNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("neighborIpAddress:");
      if (this.neighborIpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.neighborIpAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class withdrawRoute_argsStandardSchemeFactory implements SchemeFactory {
      public withdrawRoute_argsStandardScheme getScheme() {
        return new withdrawRoute_argsStandardScheme();
      }
    }

    private static class withdrawRoute_argsStandardScheme extends StandardScheme<withdrawRoute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, withdrawRoute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.prefix = iprot.readString();
                struct.setPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VPN_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vpnNum = iprot.readI32();
                struct.setVpnNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEIGHBOR_IP_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.neighborIpAddress = iprot.readString();
                struct.setNeighborIpAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, withdrawRoute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.prefix != null) {
          oprot.writeFieldBegin(PREFIX_FIELD_DESC);
          oprot.writeString(struct.prefix);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VPN_NUM_FIELD_DESC);
        oprot.writeI32(struct.vpnNum);
        oprot.writeFieldEnd();
        if (struct.neighborIpAddress != null) {
          oprot.writeFieldBegin(NEIGHBOR_IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.neighborIpAddress);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class withdrawRoute_argsTupleSchemeFactory implements SchemeFactory {
      public withdrawRoute_argsTupleScheme getScheme() {
        return new withdrawRoute_argsTupleScheme();
      }
    }

    private static class withdrawRoute_argsTupleScheme extends TupleScheme<withdrawRoute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, withdrawRoute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetVpnNum()) {
          optionals.set(1);
        }
        if (struct.isSetNeighborIpAddress()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPrefix()) {
          oprot.writeString(struct.prefix);
        }
        if (struct.isSetVpnNum()) {
          oprot.writeI32(struct.vpnNum);
        }
        if (struct.isSetNeighborIpAddress()) {
          oprot.writeString(struct.neighborIpAddress);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, withdrawRoute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.prefix = iprot.readString();
          struct.setPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vpnNum = iprot.readI32();
          struct.setVpnNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.neighborIpAddress = iprot.readString();
          struct.setNeighborIpAddressIsSet(true);
        }
      }
    }

  }

  public static class withdrawRoute_result implements org.apache.thrift.TBase<withdrawRoute_result, withdrawRoute_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("withdrawRoute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new withdrawRoute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new withdrawRoute_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(withdrawRoute_result.class, metaDataMap);
    }

    public withdrawRoute_result() {
    }

    public withdrawRoute_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public withdrawRoute_result(withdrawRoute_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public withdrawRoute_result deepCopy() {
      return new withdrawRoute_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public withdrawRoute_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof withdrawRoute_result)
        return this.equals((withdrawRoute_result)that);
      return false;
    }

    public boolean equals(withdrawRoute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(withdrawRoute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      withdrawRoute_result typedOther = (withdrawRoute_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("withdrawRoute_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class withdrawRoute_resultStandardSchemeFactory implements SchemeFactory {
      public withdrawRoute_resultStandardScheme getScheme() {
        return new withdrawRoute_resultStandardScheme();
      }
    }

    private static class withdrawRoute_resultStandardScheme extends StandardScheme<withdrawRoute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, withdrawRoute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, withdrawRoute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class withdrawRoute_resultTupleSchemeFactory implements SchemeFactory {
      public withdrawRoute_resultTupleScheme getScheme() {
        return new withdrawRoute_resultTupleScheme();
      }
    }

    private static class withdrawRoute_resultTupleScheme extends TupleScheme<withdrawRoute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, withdrawRoute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, withdrawRoute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRoutes_args implements org.apache.thrift.TBase<getRoutes_args, getRoutes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoutes_args");

    private static final org.apache.thrift.protocol.TField OPTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("optype", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField WIN_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("winSize", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoutes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoutes_argsTupleSchemeFactory());
    }

    public int optype; // required
    public int winSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPTYPE((short)1, "optype"),
      WIN_SIZE((short)2, "winSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTYPE
            return OPTYPE;
          case 2: // WIN_SIZE
            return WIN_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OPTYPE_ISSET_ID = 0;
    private static final int __WINSIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTYPE, new org.apache.thrift.meta_data.FieldMetaData("optype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WIN_SIZE, new org.apache.thrift.meta_data.FieldMetaData("winSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoutes_args.class, metaDataMap);
    }

    public getRoutes_args() {
    }

    public getRoutes_args(
      int optype,
      int winSize)
    {
      this();
      this.optype = optype;
      setOptypeIsSet(true);
      this.winSize = winSize;
      setWinSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoutes_args(getRoutes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.optype = other.optype;
      this.winSize = other.winSize;
    }

    public getRoutes_args deepCopy() {
      return new getRoutes_args(this);
    }

    @Override
    public void clear() {
      setOptypeIsSet(false);
      this.optype = 0;
      setWinSizeIsSet(false);
      this.winSize = 0;
    }

    public int getOptype() {
      return this.optype;
    }

    public getRoutes_args setOptype(int optype) {
      this.optype = optype;
      setOptypeIsSet(true);
      return this;
    }

    public void unsetOptype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPTYPE_ISSET_ID);
    }

    /** Returns true if field optype is set (has been assigned a value) and false otherwise */
    public boolean isSetOptype() {
      return EncodingUtils.testBit(__isset_bitfield, __OPTYPE_ISSET_ID);
    }

    public void setOptypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPTYPE_ISSET_ID, value);
    }

    public int getWinSize() {
      return this.winSize;
    }

    public getRoutes_args setWinSize(int winSize) {
      this.winSize = winSize;
      setWinSizeIsSet(true);
      return this;
    }

    public void unsetWinSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINSIZE_ISSET_ID);
    }

    /** Returns true if field winSize is set (has been assigned a value) and false otherwise */
    public boolean isSetWinSize() {
      return EncodingUtils.testBit(__isset_bitfield, __WINSIZE_ISSET_ID);
    }

    public void setWinSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTYPE:
        if (value == null) {
          unsetOptype();
        } else {
          setOptype((Integer)value);
        }
        break;

      case WIN_SIZE:
        if (value == null) {
          unsetWinSize();
        } else {
          setWinSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTYPE:
        return Integer.valueOf(getOptype());

      case WIN_SIZE:
        return Integer.valueOf(getWinSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTYPE:
        return isSetOptype();
      case WIN_SIZE:
        return isSetWinSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoutes_args)
        return this.equals((getRoutes_args)that);
      return false;
    }

    public boolean equals(getRoutes_args that) {
      if (that == null)
        return false;

      boolean this_present_optype = true;
      boolean that_present_optype = true;
      if (this_present_optype || that_present_optype) {
        if (!(this_present_optype && that_present_optype))
          return false;
        if (this.optype != that.optype)
          return false;
      }

      boolean this_present_winSize = true;
      boolean that_present_winSize = true;
      if (this_present_winSize || that_present_winSize) {
        if (!(this_present_winSize && that_present_winSize))
          return false;
        if (this.winSize != that.winSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRoutes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRoutes_args typedOther = (getRoutes_args)other;

      lastComparison = Boolean.valueOf(isSetOptype()).compareTo(typedOther.isSetOptype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optype, typedOther.optype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWinSize()).compareTo(typedOther.isSetWinSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWinSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winSize, typedOther.winSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoutes_args(");
      boolean first = true;

      sb.append("optype:");
      sb.append(this.optype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("winSize:");
      sb.append(this.winSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoutes_argsStandardSchemeFactory implements SchemeFactory {
      public getRoutes_argsStandardScheme getScheme() {
        return new getRoutes_argsStandardScheme();
      }
    }

    private static class getRoutes_argsStandardScheme extends StandardScheme<getRoutes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoutes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.optype = iprot.readI32();
                struct.setOptypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WIN_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.winSize = iprot.readI32();
                struct.setWinSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoutes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OPTYPE_FIELD_DESC);
        oprot.writeI32(struct.optype);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WIN_SIZE_FIELD_DESC);
        oprot.writeI32(struct.winSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoutes_argsTupleSchemeFactory implements SchemeFactory {
      public getRoutes_argsTupleScheme getScheme() {
        return new getRoutes_argsTupleScheme();
      }
    }

    private static class getRoutes_argsTupleScheme extends TupleScheme<getRoutes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoutes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOptype()) {
          optionals.set(0);
        }
        if (struct.isSetWinSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOptype()) {
          oprot.writeI32(struct.optype);
        }
        if (struct.isSetWinSize()) {
          oprot.writeI32(struct.winSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoutes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.optype = iprot.readI32();
          struct.setOptypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.winSize = iprot.readI32();
          struct.setWinSizeIsSet(true);
        }
      }
    }

  }

  public static class getRoutes_result implements org.apache.thrift.TBase<getRoutes_result, getRoutes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoutes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoutes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoutes_resultTupleSchemeFactory());
    }

    public Routes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Routes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoutes_result.class, metaDataMap);
    }

    public getRoutes_result() {
    }

    public getRoutes_result(
      Routes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoutes_result(getRoutes_result other) {
      if (other.isSetSuccess()) {
        this.success = new Routes(other.success);
      }
    }

    public getRoutes_result deepCopy() {
      return new getRoutes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Routes getSuccess() {
      return this.success;
    }

    public getRoutes_result setSuccess(Routes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Routes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoutes_result)
        return this.equals((getRoutes_result)that);
      return false;
    }

    public boolean equals(getRoutes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRoutes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRoutes_result typedOther = (getRoutes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoutes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoutes_resultStandardSchemeFactory implements SchemeFactory {
      public getRoutes_resultStandardScheme getScheme() {
        return new getRoutes_resultStandardScheme();
      }
    }

    private static class getRoutes_resultStandardScheme extends StandardScheme<getRoutes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoutes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Routes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoutes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoutes_resultTupleSchemeFactory implements SchemeFactory {
      public getRoutes_resultTupleScheme getScheme() {
        return new getRoutes_resultTupleScheme();
      }
    }

    private static class getRoutes_resultTupleScheme extends TupleScheme<getRoutes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoutes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoutes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Routes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRouteTarget_args implements org.apache.thrift.TBase<getRouteTarget_args, getRouteTarget_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRouteTarget_args");

    private static final org.apache.thrift.protocol.TField PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRouteTarget_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRouteTarget_argsTupleSchemeFactory());
    }

    public String prefix; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PREFIX((short)1, "prefix");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PREFIX
            return PREFIX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PREFIX, new org.apache.thrift.meta_data.FieldMetaData("prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRouteTarget_args.class, metaDataMap);
    }

    public getRouteTarget_args() {
    }

    public getRouteTarget_args(
      String prefix)
    {
      this();
      this.prefix = prefix;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRouteTarget_args(getRouteTarget_args other) {
      if (other.isSetPrefix()) {
        this.prefix = other.prefix;
      }
    }

    public getRouteTarget_args deepCopy() {
      return new getRouteTarget_args(this);
    }

    @Override
    public void clear() {
      this.prefix = null;
    }

    public String getPrefix() {
      return this.prefix;
    }

    public getRouteTarget_args setPrefix(String prefix) {
      this.prefix = prefix;
      return this;
    }

    public void unsetPrefix() {
      this.prefix = null;
    }

    /** Returns true if field prefix is set (has been assigned a value) and false otherwise */
    public boolean isSetPrefix() {
      return this.prefix != null;
    }

    public void setPrefixIsSet(boolean value) {
      if (!value) {
        this.prefix = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PREFIX:
        if (value == null) {
          unsetPrefix();
        } else {
          setPrefix((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PREFIX:
        return getPrefix();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PREFIX:
        return isSetPrefix();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRouteTarget_args)
        return this.equals((getRouteTarget_args)that);
      return false;
    }

    public boolean equals(getRouteTarget_args that) {
      if (that == null)
        return false;

      boolean this_present_prefix = true && this.isSetPrefix();
      boolean that_present_prefix = true && that.isSetPrefix();
      if (this_present_prefix || that_present_prefix) {
        if (!(this_present_prefix && that_present_prefix))
          return false;
        if (!this.prefix.equals(that.prefix))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRouteTarget_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRouteTarget_args typedOther = (getRouteTarget_args)other;

      lastComparison = Boolean.valueOf(isSetPrefix()).compareTo(typedOther.isSetPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix, typedOther.prefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRouteTarget_args(");
      boolean first = true;

      sb.append("prefix:");
      if (this.prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.prefix);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRouteTarget_argsStandardSchemeFactory implements SchemeFactory {
      public getRouteTarget_argsStandardScheme getScheme() {
        return new getRouteTarget_argsStandardScheme();
      }
    }

    private static class getRouteTarget_argsStandardScheme extends StandardScheme<getRouteTarget_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRouteTarget_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.prefix = iprot.readString();
                struct.setPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRouteTarget_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.prefix != null) {
          oprot.writeFieldBegin(PREFIX_FIELD_DESC);
          oprot.writeString(struct.prefix);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRouteTarget_argsTupleSchemeFactory implements SchemeFactory {
      public getRouteTarget_argsTupleScheme getScheme() {
        return new getRouteTarget_argsTupleScheme();
      }
    }

    private static class getRouteTarget_argsTupleScheme extends TupleScheme<getRouteTarget_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRouteTarget_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrefix()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPrefix()) {
          oprot.writeString(struct.prefix);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRouteTarget_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.prefix = iprot.readString();
          struct.setPrefixIsSet(true);
        }
      }
    }

  }

  public static class getRouteTarget_result implements org.apache.thrift.TBase<getRouteTarget_result, getRouteTarget_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRouteTarget_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRouteTarget_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRouteTarget_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRouteTarget_result.class, metaDataMap);
    }

    public getRouteTarget_result() {
    }

    public getRouteTarget_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRouteTarget_result(getRouteTarget_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getRouteTarget_result deepCopy() {
      return new getRouteTarget_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getRouteTarget_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRouteTarget_result)
        return this.equals((getRouteTarget_result)that);
      return false;
    }

    public boolean equals(getRouteTarget_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRouteTarget_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRouteTarget_result typedOther = (getRouteTarget_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRouteTarget_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRouteTarget_resultStandardSchemeFactory implements SchemeFactory {
      public getRouteTarget_resultStandardScheme getScheme() {
        return new getRouteTarget_resultStandardScheme();
      }
    }

    private static class getRouteTarget_resultStandardScheme extends StandardScheme<getRouteTarget_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRouteTarget_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRouteTarget_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRouteTarget_resultTupleSchemeFactory implements SchemeFactory {
      public getRouteTarget_resultTupleScheme getScheme() {
        return new getRouteTarget_resultTupleScheme();
      }
    }

    private static class getRouteTarget_resultTupleScheme extends TupleScheme<getRouteTarget_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRouteTarget_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRouteTarget_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
